package com.sanbeaman.shell.widget{		import com.greensock.TweenLite;	import com.greensock.TweenMax;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.MP3Loader;	import com.sanbeaman.shell.data.ColorSortObject;	import com.sanbeaman.shell.data.UIparams;	import com.sanbeaman.shell.events.ShellEvent;	import com.sanbeaman.shell.utils.SimpleUtils;	import com.sanbeaman.shell.widget.BodyUI;	import com.sanbeaman.shell.widget.ScreenCopy;	import com.sanbeaman.shell.widget.activity.ACTUI_DragBtnBox;	import com.sanbeaman.shell.widget.activity.ACTUI_FeedBackBox;	import com.sanbeaman.shell.widget.activity.ACTUI_MatchBtn;	import com.sanbeaman.shell.widget.activity.ACTUI_ScreenSubHeader;	import com.sanbeaman.shell.widget.activity.ACTUI_ScreenText;	import com.sanbeaman.shell.widget.activity.Act_DragBtn;	import com.sanbeaman.shell.widget.activity.Act_DropBoxAreaOLD;	import com.sanbeaman.shell.widget.activity.Act_DropBtn;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.ColorMatrixFilter;	import flash.filters.GlowFilter;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.media.Sound;	import flash.utils.Dictionary;
	

	public class ACT_match extends BodyUI	{		private var _actType:String;		private var _actXML:XMLList;				private var _actWidth:Number;		private var _actHeight:Number;						private var _dragMCarray:Array;		private var _dropMCarray:Array;				private var _origX:Number;		private var _origY:Number;						private var _itemYpadding:Number;		private var _itemXpadding:Number;				private var _actXstart:Number;		private var _actYstart:Number;				private var _matchHits:int;		private var _matchMax:int;						private var _columnPadding:Number;		private var _rowPadding:Number;				private var _btnWidth:Number;		private var _btnHeight:Number;						private var _feedbackBox:ACTUI_FeedBackBox;										private var _shellDir:String;				private var _actItemsArray:Array;						private var _totalClicks:int = 0;			private var _totalMatches:int;				private var _iArea:Sprite;		private var _dragContainer:Sprite;		private var _dragArea:Sprite;						private var _dragHeader:Sprite;		private var _dropHeader:Sprite;				private var _dropContainer:Sprite;		private var _feedbackContainer:Sprite;				private var _dropArea:Sprite;						private var _originX:Number;		private var _originY:Number;			//	private var _delayTimer:Timer;						private var _hasPrintBtn:Boolean = false;					private var _dragColumnWidth:Number;		private var _dropColumnWidth:Number;				private var _actX:Number;		private var _actY:Number;						private var _iAreaWidth:Number;		private var _iAreaHeight:Number;				private var _dragHeaderArea:Sprite;		private var _dropHeaderArea:Sprite;				private var _feedbackBoxArray:Array;						private var _totalDragItems:int;		private var _totalDropItems:int;						private var _subheadHeight:Number;		private var _rowHeight:Number;						private var _currentMatchBtn:ACTUI_MatchBtn;		private var _currentMatchTarget:ACTUI_MatchBtn;						private var _matchTargetArray:Array;		private var _matchBtnArray:Array;						private var _matchArea:Sprite;								private var _filterGlow_blue:BitmapFilter;		private var _filterGlow_green:BitmapFilter;		private var _filterGlow_red:BitmapFilter;		private var _filterGlow:Array;		private var _colorMatrix:ColorMatrixFilter;		private var _matrix:Array;		private var _filterBW:Array;				public var fbHeight:Number;		public var fbWidth:Number;				public var fbPadding:Number;		public var fbX:Number;		public var fbY:Number;					private var _totalMatches_correct:int;				private var _fontFamily:String;		private var _localeID:String;				public function ACT_match()		{			super();		}				public function buildActivity(iwidth:Number, iheight:Number, atype:String, actXML:XML, shellDir:String,fontfamily:String = "Arial",langID:String = null):void		{			//this.id = id;			//this.order = order;		//	this.time = time;			this.type = "act_match";			//trace("actXML= " + actXML.toString());			_shellDir = shellDir;			_actType = atype;			_actWidth = iwidth;			_actHeight= iheight;			_matchHits = 0;			//_buildACTItems(actXML);		//	_createFilters();						 _fontFamily = fontfamily;			_localeID = (langID != null)?langID:"en";			_buildACTContent(actXML);		}				private function _buildACTContent(scXML:XML):void		{			var contentType:String = scXML.@type;			var matchBtnXML:XML;			var matchTargetXML:XML;			var subheadXML:XML;			var feedbackXML:XML;						_actX = scXML.@x;			_actY = scXML.@y;			//var dragBtnsXML:XML;		//	var dropBtnsXML:XML;		//	var subheadXML:XML = null;			_actItemsArray = new Array();			var actXML:XMLList = scXML.*;						for each (var ui:XML in actXML)			{				var ut:String = ui.@type;				var uiType:String = ut.toLowerCase();			//	trace("utype= " + uiType);				switch (uiType){					case 'screentext':						_actItemsArray.push(_createScreenText(ui));						break;					case 'subheader':						subheadXML = ui;						//_buildSubHeader(ui);						break;					case 'matchbtn':						matchBtnXML = ui;					//	trace('dragXML = '+ dragXML.toString());						break;					case 'matchtarget':						matchTargetXML = ui;						break;					case 'feedbacktext':						feedbackXML = ui;						//_createACTfeedback(ui);						break;									}							}									_actItemsArray.push(_buildInteractiveArea(matchBtnXML,matchTargetXML,subheadXML,feedbackXML));												var yHolder:Number = 0;//_actYstart;			var xHolder:Number =0;// _actXstart;						var ypad:Number = 10;						for (var i:int = 0; i < _actItemsArray.length; i++) {				var actitem:BodyUI = _actItemsArray[i] as BodyUI;			//	trace('actitem' + actitem.name);				//var actitem:BodyUI = _actItemsArray[i];				actitem.x = xHolder;				actitem.y = yHolder;				this.addChild(actitem);								//if(actitem.name == 'submitbtn'){				//	_feedbackY = yHolder;				//	}				yHolder =  actitem.y + actitem.height + ypad;			}						//this.addChild(_feedbackContainer);		}				private function _createScreenText(ixml:XML):BodyUI		{			var spr:BodyUI = new BodyUI();			spr.layout = 'relative';			spr.name = "screentext";			var fontname:String = (ixml.hasOwnProperty("@fontName"))?ixml.@fontName:_fontFamily;						var fontsize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;			var fontcolor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";			var fontstyle:String =(ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			var fontalign:String =(ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"left";						var xpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:10;			var ypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:10;						var startX:Number = (ixml.hasOwnProperty("@x"))?ixml.@x:0;			var startY:Number = (ixml.hasOwnProperty("@y"))?ixml.@y:0;						var uW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:_actWidth;			var uH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:_actHeight;						var uScreen:String = (ixml.hasOwnProperty("@screen"))?ixml.@screen:"1";						for each (var child:XML in ixml.*) {								var stxt:String = child;				var sx:Number = (child.hasOwnProperty("@x"))?child.@x:startX;				var sy:Number = (child.hasOwnProperty("@y"))?child.@y:startY;								var itemW:Number = (child.hasOwnProperty("@width"))?child.@width:uW;				var fsize:Number = (child.hasOwnProperty("@fontSize"))?child.@fontSize:fontsize;				var fcolor:String = (child.hasOwnProperty("@fontColor"))?child.@fontColor:fontcolor;				var fstyle:String =(child.hasOwnProperty("@fontStyle"))?child.@fontStyle:fontstyle;				var falign:String =(child.hasOwnProperty("@fontAlign"))?child.@fontAlign:fontalign;								var screenText:ACTUI_ScreenText = new ACTUI_ScreenText();				screenText.addText(stxt,itemW,fsize,fcolor,falign,fstyle,fontname,_localeID);								//screenText.addText(stxt,itemW,fsize,fcolor,fstyle,fontname,_localeID);								screenText.x = sx;				screenText.y = sy;				//this.addChild(txt);				screenText.mouseEnabled = false;				screenText.mouseChildren = false;				spr.addChild(screenText);								startY+= screenText.height + ypad;							}						return spr;								}				private function _playSoundEff(sndType:String):void		{			var sndloader:MP3Loader = LoaderMax.getLoader(sndType);			trace("sndloader.status " + sndloader.status);			sndloader.gotoSoundTime(0,true);			/*			if (sndloader.playProgress >= 1) {				sndloader.gotoSoundTime(0,true);			} else {			sndloader.playSound();					}			*/		}				function _progressHandler(event:LoaderEvent):void {			trace("progress: " + event.target.progress);		}				function _completeHandler(event:LoaderEvent):void {			trace(event.target + " is complete!");					}				function _errorHandler(event:LoaderEvent):void {			trace("error occured with " + event.target + ": " + event.text);		}				private function _createACTfeedback(ixml:XML):Sprite		{			var fbsprite:Sprite = new Sprite();					var uX:String = (ixml.hasOwnProperty("@x"))?ixml.@x:"0";			var uY:String = (ixml.hasOwnProperty("@y"))?ixml.@y:"0";			var uW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:_actWidth;			var uH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:0;						var umargin:Number = (ixml.hasOwnProperty("@margin"))?ixml.@margin:0;			var ufontSize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;						var ufontStyle:String =(ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			var ufontAlign:String =(ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"center";						var ufontColor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";						var fbXpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:12;			var fbYpad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:12;						var uframeSize:Number = (ixml.hasOwnProperty("@frameSize"))?ixml.@frameSize:2;			var uframeColor:String = (ixml.hasOwnProperty("@frameColor"))?ixml.@frameColor:"black";			var uframeAlpha:Number = (ixml.hasOwnProperty("@frameAlpha"))?ixml.@frameAlpha:1;						var ufillColor:String = (ixml.hasOwnProperty("@fillColor"))?ixml.@fillColor:"paleblue";			var ufillAlpha:Number = (ixml.hasOwnProperty("@fillAlpha"))?ixml.@fillAlpha:.9;						var ufontColorCode:uint = SHELL_COLORS.lookUpColor(ufontColor);			var uframeColorCode:uint = SHELL_COLORS.lookUpColor(uframeColor);			var ufillColorCode:uint = SHELL_COLORS.lookUpColor(ufillColor);			var newHeight:Number;			var _feedbackBox:ACTUI_FeedBackBox;			for each (var child:XML in ixml.*) {								_feedbackBox = new ACTUI_FeedBackBox();								_feedbackBox.init(child,uW,uH,uframeSize,uframeColorCode,ufillColorCode,ufillAlpha,ufontSize,ufontColorCode,fbXpad,fbYpad,ufontAlign,_fontFamily,_localeID);								//	2,0x000000,SHELL_COLORS.CLR_LTBLUE,0.9,18,0x000000,10);				_feedbackBox.name = child.@type;				fbsprite.addChild(_feedbackBox);				newHeight = (_feedbackBox.height > uH)?int(_feedbackBox.height):uH;							}						var xHolder:Number = (!isNaN(Number(uX)))?Number(uX):SimpleUtils.relativeLayoutConverter(uX,_actWidth,uW,umargin);			var yHolder:Number = (!isNaN(Number(uY)))?Number(uY):SimpleUtils.relativeLayoutConverter(uY,_actHeight,newHeight,umargin);			fbsprite.x = xHolder;			fbsprite.y = yHolder;			return fbsprite;					}		/*		private function _createACTfeedback(ixml:XML):Sprite		{			var fbsprite:Sprite = new Sprite();									var uX:String = ixml.@x;			var uY:String = ixml.@y;						var uW:Number = ixml.@width;			var uH:Number = ixml.@height;						var uPadding:Number = 20;											//	var _feedbackBox:ACT_FeedBackBox = new ACT_FeedBackBox();						var fbPadding:Number = 12;						var fbFrameSize:Number = 2;			var fbFrameColor:String = "black";//0x000000;						var fbFillAlpha:Number = .9;			var fbFillColor:String = "paleblue";						var fbFontSize:Number = 18;			var fbFontColor:String = "black";			var fbFontAlign:String = "center";						var fbFillColorCode:uint = SHELL_COLORS.lookUpColor(fbFillColor);			var fbFrameColorCode:uint = 0x000000;			var fbFontColorCode:uint = 0x000000;						for each (var child:XML in ixml.*) {								_feedbackBox = new ACTUI_FeedBackBox();				_feedbackBox.init(child,uW,uH,fbFrameSize,fbFrameColorCode,fbFillColorCode,fbFillAlpha,fbFontSize,fbFontColorCode,fbPadding,fbPadding,fbFontAlign,_fontFamily,_localeID);							//	_feedbackBox.init(child,afbW,afbH,4,0xffffff,SHELL_COLORS.CLR_LTBLUE,1,18,SHELL_COLORS.CLR_DKGREY,10);				//_feedbackBox.alpha = 0;															//	_feedbackBox.visible = false;			//	this.addChild(_feedbackBox);				fbsprite.addChild(_feedbackBox);			}			var newHeight:Number = (_feedbackBox.height > uH)?int(_feedbackBox.height):uH;			var xHolder:Number = (!isNaN(Number(uX)))?Number(uX):SimpleUtils.relativeLayoutConverter(uX,_actWidth,uW,uPadding);			var yHolder:Number = (!isNaN(Number(uY)))?Number(uY):SimpleUtils.relativeLayoutConverter(uY,_actHeight,newHeight,uPadding);			fbsprite.x = xHolder;			fbsprite.y = yHolder;			return fbsprite;					}		*/		private function _buildInteractiveArea(uimatchbtns:XML,uimatchtargets:XML,uisubheadnode3:XML = null, uifeedback:XML = null):BodyUI		{						var iarea:BodyUI = new BodyUI();			iarea.name = 'iarea';			iarea.layout = 'relative';						var headerArea:Sprite = new Sprite();						_subheadHeight = 0;			var hasSubHead:Boolean = false;						var matchBtnX:Number = 0;			//var xHolder:Number = (!isNaN(Number(uX)))?Number(uX):SimpleUtils.relativeLayoutConverter(uX,_actWidth,uW,uPadding);		//	var yHolder:Number = (!isNaN(Number(uY)))?Number(uY):SimpleUtils.relativeLayoutConverter(uY,_actHeight,newHeight,uPadding);			var targetColpos:String = (uimatchtargets.hasOwnProperty("@x"))?uimatchtargets.@x:"0";					var startX:Number =  uimatchbtns.@x;			var startY:Number =  uimatchbtns.@y;			_rowHeight = uimatchbtns.@height;						//_columnPadding =  uimatchbtns.@columnPadding;			//_rowPadding = uimatchbtns.@rowPadding;						_columnPadding =  uimatchbtns.@xPad;			_rowPadding = uimatchbtns.@yPad;						if (uisubheadnode3 != null) {				hasSubHead = true;				_dragHeaderArea = new Sprite();				_dropHeaderArea = new Sprite();				var subHeaderDic:Dictionary;				var _hasDragHeader:Boolean = false;				var _hasDropHeader:Boolean = false;				subHeaderDic =  _build_SubHeader(uisubheadnode3);			//	subHeaderDic =  _buildSubHeader(uisubheadnode3);								var dropheadHeight:Number;				var dragheadHeight:Number;								for (var sp:* in subHeaderDic) {					var mysprite:Sprite;// = sp as Sprite;					if (subHeaderDic[sp] == "dropHead"){						_dropHeaderArea = sp as Sprite;												if (_dropHeaderArea.numChildren > 0) {							_hasDropHeader = true;							dropheadHeight = _dropHeaderArea.height;						} else {							dropheadHeight = 0;						}						trace("dropheadHeight= " + dropheadHeight);// + "ds.height= " + ds.height+  " numchildren= " + ds.numChildren);					} else if (subHeaderDic[sp] == "dragHead"){						_dragHeaderArea = sp as Sprite;												if (_dragHeaderArea.numChildren > 0) {							_hasDragHeader = true;							dragheadHeight = _dragHeaderArea.height;						} else {							dragheadHeight= 0;						}											}				}								if (dragheadHeight >= dropheadHeight) {					_subheadHeight = dragheadHeight + _rowPadding;				} else {					_subheadHeight = dropheadHeight + _rowPadding;				}							}						if (_hasDragHeader) {				_dragHeaderArea.x = matchBtnX;				iarea.addChild(_dragHeaderArea);			}			if (_hasDropHeader) {				_dropHeaderArea.x = matchTargetX;				iarea.addChild(_dropHeaderArea);			}						_matchArea = new Sprite();			_matchArea.y = _subheadHeight;												var xFactor:Number = 0;			var yFactor:Number = _rowHeight + _rowPadding;						var tempMatchArray:Array = _buildMatchBtns(uimatchbtns);			_matchBtnArray =  new Array(tempMatchArray.length);			//_buildMatchBtns(uimatchbtns);		//	trace('_matchBtnArray.length'+_matchBtnArray.length);						var randomPos:Number = 0;			for (var mb:int = 0; mb < _matchBtnArray.length; mb++){				randomPos = int(Math.random() * tempMatchArray.length);				var mbtn:ACTUI_MatchBtn = tempMatchArray.splice(randomPos,1)[0] as ACTUI_MatchBtn;				mbtn.addEventListener(MouseEvent.CLICK, _clickMatchBtn);				mbtn.x = matchBtnX;				mbtn.y = mb * yFactor;				_matchArea.addChild(mbtn);				_matchBtnArray[mb] = mbtn;							}			var tempTargetArray:Array = _buildMatchBtns(uimatchtargets);			var targetBtnWidth:Number = uimatchtargets.@width;			var matchTargetX:Number = (!isNaN(Number(targetColpos)))?Number(targetColpos):SimpleUtils.relativeLayoutConverter(targetColpos,_actWidth,targetBtnWidth,0);//300;//(uimatchtargets.hasOwnProperty("@x"))?uimatchtargets.@x:333;			if (_hasDropHeader) {				_dropHeaderArea.x = matchTargetX;				iarea.addChild(_dropHeaderArea);			}						randomPos = 0;			_matchTargetArray = new Array(tempTargetArray.length);		//	trace('_matchTargetArray.length'+_matchTargetArray.length);			_totalMatches = 0;			for (var mt:int = 0; mt < _matchTargetArray.length; mt++){				randomPos = int(Math.random() * tempTargetArray.length);				var mtar:ACTUI_MatchBtn = tempTargetArray.splice(randomPos,1)[0] as ACTUI_MatchBtn;				mtar.x = matchTargetX;				mtar.y = mt * yFactor;				_matchArea.addChild(mtar);				_matchTargetArray[mt] = mtar;				_totalMatches++			}					iarea.addChild(_matchArea);					_feedbackContainer =  _createACTfeedback(uifeedback);						return iarea;					}				private function _build_SubHeader(uinode:XML):Dictionary		{			var subHeadDic:Dictionary = new Dictionary(true);						var uFontSize:Number = (uinode.hasOwnProperty("@fontSize"))?uinode.@fontSize:16;			var uFontColor:String = (uinode.hasOwnProperty("@fontColor"))?uinode.@fontColor:"0x000000";			var uFontAlign:String = (uinode.hasOwnProperty("@fontAlign"))?uinode.@fontAlign:"inherit";			var uFontStyle:String = (uinode.hasOwnProperty("@fontStyle"))?uinode.@fontStyle:"reg";						var uw:Number = (uinode.hasOwnProperty("@width"))?uinode.@width:100;			var uh:Number = (uinode.hasOwnProperty("@height"))?uinode.@height:0;						var uxpad:Number = (uinode.hasOwnProperty("@xPad"))?uinode.@xPad:0;			var uypad:Number = (uinode.hasOwnProperty("@yPad"))?uinode.@yPad:0;						var itemXML:XMLList = uinode.*;					var _dragHead:Sprite = new Sprite();			_dragHead.name = "dragger";			var _dropHead:Sprite = new Sprite();			_dropHead.name = "dropper";				for each (var item:XML in itemXML) 			{				var stxt:String = item;				var itemW:Number = (item.hasOwnProperty("@width"))?item.@width:uw;				var itemH:Number = (item.hasOwnProperty("@height"))?item.@height:uh;				var fsize:Number = (item.hasOwnProperty("@fontSize"))?item.@fontSize:uFontSize;				var fcolor:String = (item.hasOwnProperty("@fontColor"))?item.@fontColor:uFontColor;				//internal attribures will override group attributes				var fstyle:String =(item.hasOwnProperty("@fontStyle"))?item.@fontStyle:uFontStyle;				var falign:String =(item.hasOwnProperty("@fontAlign"))?item.@fontAlign:uFontAlign;				var xpad:Number = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				var ypad:Number = (item.hasOwnProperty("@yPad"))?item.@yPad:uypad;				var subHeader:ACTUI_ScreenSubHeader = new ACTUI_ScreenSubHeader();								subHeader.addText(stxt,itemW,itemH,fsize,fcolor,falign,fstyle,_fontFamily,_localeID);								var headerType:String  = item.@type;								//	trace("headerType=" + headerType);				if (headerType == "dropHeader"){					_dropHead.addChild(subHeader);				} else {					_dragHead.addChild(subHeader);				}				//	_dropContainer.addChild(subHeader);											}			//	subHeadDic["dropHead"] = _dropHead;			//	subHeadDic["dragHead"] = _dragHead;									subHeadDic[_dropHead] = "dropHead";						subHeadDic[_dragHead] = "dragHead";									return subHeadDic;		}					private function _buildSubHeader(uinode:XML):Dictionary		{						var subHeadDic:Dictionary = new Dictionary(true);						var sub_uip:UIparams = new UIparams();						sub_uip.uiFontSize = uinode.@fontSize;						//var subHeaderFontSize:Number = uinode.@fontSize;			var subHeaderFontAlign:String;// = uinode.@fontAlign;						if(uinode.hasOwnProperty("@fontAlign")){				subHeaderFontAlign = uinode.@fontAlign;			} else {				subHeaderFontAlign = "left";			}						if (subHeaderFontAlign == "center"){				sub_uip.uiFontHAlign = subHeaderFontAlign;			}											//	var subHeaderFontColor:String = uinode.@mainColor;			sub_uip.uiFontColor = uinode.@fontColor;					//	var subHeaderFontColorCode:uint = SHELL_COLORS.lookUpColor(String(subHeaderFontColor));						var subHeaderFillColor:String;		//	var subHeaderFillColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFillColor));			var subHeaderFillAlpha:Number;// = uinode.@fillAlpha;//0;						if(uinode.hasOwnProperty("@fillAlpha")){				subHeaderFillAlpha = uinode.@fillAlpha;			} else {				subHeaderFillAlpha = 0;			}			if(uinode.hasOwnProperty("@fillColor")){				subHeaderFillColor = uinode.@fillColor;			} else {				subHeaderFillColor = "white"				subHeaderFillAlpha = 0;			}			sub_uip.uiFillColor = subHeaderFillColor;			sub_uip.uiFillAlpha = subHeaderFillAlpha;						var subHeaderFrameSize:Number;// = uinode.@fontSize;			var subHeaderFrameColor:String;// = uinode.@mainColor;			var subHeaderFrameColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			var subHeaderFrameAlpha:Number ;//= uinode.@frameAlpha;//0;						if(uinode.hasOwnProperty("@frameSize")){				subHeaderFrameSize = uinode.@frameSize;			} else {				subHeaderFrameSize = 4;			}						if(uinode.hasOwnProperty("@frameAlpha")){				subHeaderFrameAlpha = uinode.@frameAlpha;			}						if(uinode.hasOwnProperty("@frameColor")){				subHeaderFrameColor = uinode.@frameColor;				subHeaderFrameColorCode = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			} else {				subHeaderFrameColorCode = 0xffffff;				subHeaderFrameAlpha = 0;			}						var uxpad:Number = (uinode.hasOwnProperty("@xPad"))?uinode.@xPad:0;			var uypad:Number = (uinode.hasOwnProperty("@yPad"))?uinode.@yPad:0;						var itemXML:XMLList = uinode.*;									var _dragHead:Sprite = new Sprite();			_dragHead.name = "dragger";			var _dropHead:Sprite = new Sprite();			_dropHead.name = "dropper";									for each (var item:XML in itemXML) 			{				var subheader_txt:String = item;				var subheader_width:Number = item.@width;				//internal attribures will override group attributes				if(item.hasOwnProperty("@fontAlign")){					sub_uip.uiFontHAlign = item.@fontAlign;				}								sub_uip.uiPadX = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				sub_uip.uiPadY = (item.hasOwnProperty("@xPad"))?item.@yPad:uypad;				var subHeader:BodySubHeader = new BodySubHeader();								subHeader.addHeader(subheader_txt,sub_uip);													//	subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var subHeader:HeaderLabel = new HeaderLabel(subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var headerLabel:HeaderLabel = new HeaderLabel(header_txt,_header_width,headerSize,"left",headerColorCode,fillColorCode,fillColorAlpha,frameSize,frameColorCode);				subHeader.x = item.@x;				subHeader.y = item.@y;				var headerType:String  = item.@type;							//	trace("headerType=" + headerType);				if (headerType == "dropHeader"){					_dropHead.addChild(subHeader);				} else {					_dragHead.addChild(subHeader);									}				//	_dropContainer.addChild(subHeader);											}			//	subHeadDic["dropHead"] = _dropHead;			//	subHeadDic["dragHead"] = _dragHead;									subHeadDic[_dropHead] = "dropHead";						subHeadDic[_dragHead] = "dragHead";									return subHeadDic;					}				private function _buildMatchBtns(uinode:XML):Array		{			var iW:Number = uinode.@width;			var iH:Number = uinode.@height;						var fillColor:String = uinode.@fillColor;			var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);			var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"colorfill";			var clrarray:Array = new Array();			if (fillColorType == "gradient"){								clrarray.push(fillColorCode);				var fillcolor2:String = (uinode.hasOwnProperty("@fillColor2"))?uinode.@fillColor2:"grey";				var fillColorCode2:uint = SHELL_COLORS.lookUpColor(fillcolor2);				clrarray.push(fillColorCode2);							}			var btnarray:Array = new Array();						var itemXML:XMLList = uinode.*;					var dragUIp:UIparams = new UIparams();						if(uinode.hasOwnProperty("@fontSize")){				dragUIp.uiFontSize = uinode.@fontSize;				dragUIp.uiFontColor = uinode.@fontColor;				dragUIp.uiFontHAlign = uinode.@fontAlign;				dragUIp.uiFontVAlign = uinode.@fontVAlign;				dragUIp.uiFontStyle= uinode.@fontStyle;				dragUIp.uiFrameSize= uinode.@frameSize;				dragUIp.uiFrameColor= uinode.@frameColor;				dragUIp.uiFillColorArray = clrarray;			} else {				dragUIp = null;			}			var btype0:String = uinode.@type;			var btype:String = btype0.toLowerCase();						for each (var item:XML in itemXML) 			{ 				var bLabel:String = item;				var matchbtn:ACTUI_MatchBtn = new ACTUI_MatchBtn();				matchbtn.buildBtn(btype,bLabel,iW,iH,fillColorType,fillColorCode,dragUIp,_fontFamily,_localeID);				matchbtn.isanswer = item.@isanswer;				matchbtn.bid = item.@id;				matchbtn.name = item.@id;				btnarray.push(matchbtn);			}								return btnarray;					}				/** 		 *  Match Button Click handler sets CurrentMatch Button to clicked button 		 * 	and activates target buttons		 */		private function _clickMatchBtn(evt:MouseEvent):void		{			if (_currentMatchBtn != null) {				_currentMatchBtn.currentState = 'ready';			}			var obj:Object = evt.currentTarget;			_currentMatchBtn = obj as ACTUI_MatchBtn;			_currentMatchBtn.currentState = 'active';			_activateTargetBtns();		}				private function _deActivateTargetBtns():void		{			for (var j:int = 0; j < _matchTargetArray.length; j++) {				var mbt:ACTUI_MatchBtn = _matchTargetArray[j];				if (!mbt.isChecked) {					mbt.enabled = false;					mbt.removeEventListener(MouseEvent.CLICK,_clickMatchTarget);				}				}		}				private function _activateTargetBtns():void		{			for (var j:int = 0; j < _matchTargetArray.length; j++) {				var mbt:ACTUI_MatchBtn = _matchTargetArray[j];				if (!mbt.isChecked) {					mbt.enabled = true;					mbt.currentState = 'ready';					mbt.addEventListener(MouseEvent.CLICK,_clickMatchTarget);				}			}		}		private function _clickMatchTarget(evt:MouseEvent):void		{			var obj:Object = evt.currentTarget;						// event.target.x = myTarget.x;			// event.target.y = myTarget.y;			//	_drawLineCorrect2(MovieClip(evt.target));			_currentMatchTarget = obj as ACTUI_MatchBtn;			_currentMatchTarget.currentState = 'active';			_drawLine(_currentMatchTarget);								}				private function _drawLine(matchTarget:ACTUI_MatchBtn) : void {			var line:Sprite = new Sprite();//Sprite(item.getChildAt(1));			//var localStart:Point = new Point(_currentMatchBtn.lineBall.x, _currentMatchBtn.lineBall.y);						var localStart:Point = _currentMatchBtn.localToGlobal(new Point(_currentMatchBtn.lineBall.x, _currentMatchBtn.lineBall.y));			var maStartPoint:Point = this.globalToLocal(new Point(localStart.x, localStart.y));			//	var localStart:Point = item.globalToLocal(new Point(startX, startY));			var localItem:Point = matchTarget.localToGlobal(new Point(matchTarget.lineBall.x, matchTarget.lineBall.y));			var maEndPoint:Point = this.globalToLocal(new Point(localItem.x, localItem.y));									//var localItem:Point = new Point(item.lineBall.x, item.lineBall.y);					//	trace("item.x , item.y " + matchTarget.x + "  ,  " + matchTarget.y);			with(line.graphics){				clear();				moveTo(maStartPoint.x,maStartPoint.y);				//moveTo(startX, startY);				lineStyle(3,0x666666);				//lineStyle(2, 0);				lineTo(maEndPoint.x,maEndPoint.y);				this.addChildAt(line, 0);			}			/*			with(line.graphics){			clear();			moveTo(localStart.x,localStart.y);			//moveTo(startX, startY);			lineStyle(3,0x666666);			//lineStyle(2, 0);			lineTo(localItem.x,localItem.y);			this.addChildAt(line, 0);			}			*/			_checkMatch(line);			//_setCorrect();   		} 		private function _checkMatch(lne:Sprite):void		{			var matchAnswer:String = _currentMatchBtn.isanswer;			var matchTarget:String = _currentMatchTarget.isanswer;		//	trace("matchAnswer-  " + matchAnswer + "  matchTarget- "+ matchTarget);			if (matchAnswer == matchTarget) {				TweenMax.to(lne, 0, {colorTransform:{tint:0x00ff00, tintAmount:1}});			//	TweenMax.to(lne, 0, {colorMatrixFilter:{colorize:0x00ff00, amount:3}});			//	TweenMax.to(lne, .5, {colorMatrixFilter:{colorize:0xff0000, amount:3}});				TweenMax.to(lne, 0, {glowFilter:{color:0x00ff00, alpha:1, blurX:4, blurY:4}});			//	lne.transform.colorTransform =  new ColorTransform(1, 1, 1, 1, 0, 255, 0, 0);				//lne.filters = [_filterGlow_green];				_totalMatches_correct++;				_checkOffMatchBtns();				//_playCorrect();											} else {				TweenMax.to(lne, 0, {colorTransform:{tint:0xff0000, tintAmount:1}});				//TweenMax.to(lne, 0, {colorMatrixFilter:{colorize:0xff0000, amount:3}});				TweenMax.to(lne, 0, {glowFilter:{color:0xff0000, alpha:1, blurX:4, blurY:4}});			//	lne.transform.colorTransform =  new ColorTransform(1, 1, 1, 1, 255, 0, 0, 0);			//	lne.filters = [_filterGlow_red];								_removeLine(lne);			}								}				/*		private function _createFilters():void		{			_filterGlow_green = new GlowFilter(0x00ff00,1,5,5,4,BitmapFilterQuality.MEDIUM);						_filterGlow_blue = new GlowFilter(0x66CCFF,.6,15,15,4,BitmapFilterQuality.MEDIUM);			_filterGlow_red = new GlowFilter(0xff0000,1,5,5,4,BitmapFilterQuality.MEDIUM);			//_filterGlow = [_filterGlow_blue];			//_color = new AdjustColor();			_color.brightness = 20;			_color.contrast= 20;			_color.hue = 0;			_color.saturation = -100;						_matrix = _color.CalculateFinalFlatArray();			_colorMatrix = new ColorMatrixFilter(_matrix);			_filterBW = [_colorMatrix];					}		*/		private function _removeLine(line:Sprite):void		{			_playSoundEff("wrong");			var lineTween:TweenLite = TweenLite.to(line,1,{alpha:0})			///var myTweenAlpha:Tween = new Tween(line, 'alpha', Strong.easeOut,  1, 0, 3, true);			//myTweenAlpha.addEventListener(TweenEvent.MOTION_FINISH, _myTweenAlpha_complete);			//	line.graphics.clear();						//mc.graphics.clear();			_currentMatchBtn.currentState = 'ready';			_currentMatchTarget.currentState = 'ready';			_resetBtns();		}				private function _resetBtns():void		{						_currentMatchBtn =  null;			_currentMatchTarget = null;			_deActivateTargetBtns();		}		/*		private function _playSoundEff(sndType:String):void		{			if (sndType == "correct") {								var correct:Sound = new AnswerCorrect()				correct.play();			} else if (sndType == "wrong") {				var wrong:Sound =  new AnswerWrong();				wrong.play();							}					}				*/								private function _displayFeedbackBox():void		{			this.addChild(_feedbackContainer);			_triggerActivtyComplete();								}		private function _triggerActivtyComplete():void		{			var ae:ShellEvent = new ShellEvent(ShellEvent.ACT_EVENT, 'actDone');			this.dispatchEvent(ae);					}				private function _checkOffMatchBtns():void		{						_playSoundEff("correct");			_currentMatchBtn.removeEventListener(MouseEvent.CLICK, _clickMatchBtn);			_currentMatchTarget.removeEventListener(MouseEvent.CLICK, _clickMatchTarget);						_currentMatchBtn.isChecked = true;			_currentMatchTarget.isChecked = true;			_currentMatchBtn.enabled = false;			_currentMatchTarget.enabled = false;			trace(' _totalMatches_correct=' +  _totalMatches_correct +' >= '+  _totalMatches + ' _totalMatches');			if ( _totalMatches_correct >= _totalMatches ) {			//	_feedbackContainer.y = fbY;			//_feedbackContainer.x = fbX;								this.addChild(_feedbackContainer);				//	this.addChild(feedback_mc);				_triggerActivtyComplete();							}			_resetBtns();		}	}}