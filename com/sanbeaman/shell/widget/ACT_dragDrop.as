package com.sanbeaman.shell.widget{	import com.greensock.loading.LoaderMax;	import com.greensock.loading.MP3Loader;	import com.sanbeaman.shell.data.ColorSortObject;	import com.sanbeaman.shell.data.UIparams;	import com.sanbeaman.shell.events.ShellEvent;	import com.sanbeaman.shell.utils.SimpleUtils;	import com.sanbeaman.shell.widget.BodyUI;	import com.sanbeaman.shell.widget.ScreenCopy;	import com.sanbeaman.shell.widget.activity.ACTUI_BtnFace;	import com.sanbeaman.shell.widget.activity.ACTUI_BtnItem;	import com.sanbeaman.shell.widget.activity.ACTUI_DragBtnBox;	import com.sanbeaman.shell.widget.activity.ACTUI_DropBoxArea;	import com.sanbeaman.shell.widget.activity.ACTUI_FeedBackBox;	import com.sanbeaman.shell.widget.activity.ACTUI_ScreenText;	import com.sanbeaman.shell.widget.activity.Act_DropBoxAreaOLD;	import com.sanbeaman.shell.widget.activity.Act_DropBtn;		import flash.display.DisplayObject;	import flash.display.InteractiveObject;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.media.Sound;	import flash.utils.Dictionary;	import flash.utils.getQualifiedClassName;
		public class ACT_dragDrop extends BodyUI	{		private var _actType:String;		private var _actXML:XMLList;				private var _actWidth:Number;		private var _actHeight:Number;						private var _dragMCarray:Array;		private var _dropMCarray:Array;				private var _origX:Number;		private var _origY:Number;						private var _itemYpadding:Number;		private var _itemXpadding:Number;				private var _actXstart:Number;		private var _actYstart:Number;				private var _matchHits:int;		private var _matchMax:int;						private var _columnPadding:Number;		private var _rowPadding:Number;				private var _btnWidth:Number;		private var _btnHeight:Number;						private var _feedbackBox:ACTUI_FeedBackBox;								private var _shellDir:String;				private var _actItemsArray:Array;						private var _totalClicks:int = 0;			private var _totalMatches:int;				private var _iArea:Sprite;		private var _dragContainer:Sprite;		private var _dragArea:Sprite;						private var _dragHeader:Sprite;		private var _dropHeader:Sprite;				private var _dropContainer:Sprite;		private var _feedbackContainer:Sprite;				private var _dropArea:Sprite;						private var _originX:Number;		private var _originY:Number;			//	private var _delayTimer:Timer;						private var _hasPrintBtn:Boolean = false;					private var _dragColumnWidth:Number;		private var _dropColumnWidth:Number;				private var _actX:Number;		private var _actY:Number;						private var _iAreaWidth:Number;		private var _iAreaHeight:Number;				private var _dragHeaderArea:Sprite;		private var _dropHeaderArea:Sprite;		private var _colorNameArray:Array;		private var _myColorOrder:Array;						private var _dragBTNarray:Array;				private var _dropBTNarray:Array;				private var _feedbackBoxArray:Array;						private var _totalDragItems:int;		private var _totalDropItems:int;						private var _subheadHeight:Number;		private var _fontFamily:String;		private var _localeID:String;				public function ACT_dragDrop()		{			super();		}				public function buildActivity(iwidth:Number, iheight:Number, atype:String, actXML:XML, shellDir:String, fontfamily:String = "Arial", langID:String = null):void		{			//this.id = id;			//this.order = order;		//	this.time = time;			this.type = "actdragdrop";			//trace("actXML= " + actXML.toString());			_shellDir = shellDir;			_actType = atype;			_actWidth = iwidth;			_actHeight= iheight;						_colorNameArray = new Array();			_myColorOrder = new Array();			_myColorOrder = ["salmon","turquoise","green","orange","blue","dkgrey","dkred","purple"];			//_actXML = actXML.*;		//	trace("_actXML " + _actXML.toString);			_matchHits = 0;			//_buildACTItems(actXML);			_fontFamily = fontfamily;			_localeID = (langID != null)?langID:"en";			_buildACTContent(actXML);		}				private function _buildACTContent(scXML:XML):void		{									var contentType:String = scXML.@type;			var dragXML:XML;			var dropXML:XML;			var subheadXML:XML;			var feedbackXML:XML;					//	_actX = scXML.@x;		//	_actY = scXML.@y;			//var dragBtnsXML:XML;		//	var dropBtnsXML:XML;		//	var subheadXML:XML = null;			_actItemsArray = new Array();			var actXML:XMLList = scXML.*;						for each (var ui:XML in actXML)			{				var ut:String = ui.@type;				var uiType:String = ut.toLowerCase();				trace("utype= " + uiType);				switch (uiType){					case 'questiontext':						//_createACTtext(ui);						break;					case 'actheaders':					//	_createACTheaders(ui);						break;					case 'screentext':						_actItemsArray.push(_createScreenText(ui));						break;					case 'subheader':						subheadXML = ui;						//_buildSubHeader(ui);						break;					case 'itemdragbox':						dragXML = ui;					//	trace('dragXML = '+ dragXML.toString());						break;					case 'itemdropbox':						dropXML = ui;						break;					case 'cboxes':					//	_createACTItems(ui);						break;					case 'actbtns':					//	_createACTBtns(ui);						break;					case 'feedbacktext':						feedbackXML = ui;						//_createACTfeedback(ui);						break;									}							}			_actItemsArray.push(_buildInteractiveArea(dragXML,dropXML,subheadXML,feedbackXML));		//	if (_actType == "dd1col" || _actType == "dd2row") {			//_actItemsArray.push(_buildInteractiveArea(dragXML,dropXML,subheadXML,feedbackXML));			//} else {						//	}									var yHolder:Number = 0;//_actYstart;			var xHolder:Number =0;// _actXstart;						var ypad:Number = 10;						for (var i:int = 0; i < _actItemsArray.length; i++) {				var actitem:BodyUI = _actItemsArray[i] as BodyUI;				trace('actitem' + actitem.name);				//var actitem:BodyUI = _actItemsArray[i];				actitem.x = xHolder;				actitem.y = yHolder;				this.addChild(actitem);								//if(actitem.name == 'submitbtn'){				//	_feedbackY = yHolder;				//	}				yHolder =  actitem.y + actitem.height + ypad;			}						//this.addChild(_feedbackContainer);		}				private function _buildInteractiveArea(uidragnode:XML,uidropnode2:XML,uisubheadnode3:XML = null, uifeedback:XML = null):BodyUI		{			var iarea:BodyUI = new BodyUI();			iarea.name = 'iarea';			iarea.layout = 'relative';			_subheadHeight = 0;			var hasSubHead:Boolean = false;			var startX:Number =  uidragnode.@x;			var startY:Number =  uidragnode.@y;			_columnPadding =  uidragnode.@columnPadding;			_rowPadding = uidragnode.@rowPadding;			if (uisubheadnode3 != null) {				hasSubHead = true;				_dragHeaderArea = new Sprite();				_dropHeaderArea = new Sprite();				var subHeaderDic:Dictionary;				var _hasDragHeader:Boolean = false;				var _hasDropHeader:Boolean = false;				subHeaderDic =  _buildSubHeader(uisubheadnode3);				var dropheadHeight:Number;				var dragheadHeight:Number;				for (var sp:* in subHeaderDic) {					var mysprite:Sprite;// = sp as Sprite;					if (subHeaderDic[sp] == "dropHead"){						_dropHeaderArea = sp as Sprite;						if (_dropHeaderArea.numChildren > 0) {							_hasDropHeader = true;							dropheadHeight = _dropHeaderArea.height;						} else {							dropheadHeight = 0;						}						//trace("ds.name= " + ds.name + "ds.height= " + ds.height+  " numchildren= " + ds.numChildren);					} else if (subHeaderDic[sp] == "dragHead"){						_dragHeaderArea = sp as Sprite;						if (_dragHeaderArea.numChildren > 0) {							_hasDragHeader = true;							dragheadHeight = _dragHeaderArea.height;						} else {							dragheadHeight= 0;						}					}				}				if (dragheadHeight >= dropheadHeight) {					_subheadHeight = dragheadHeight + _rowPadding;				} else {					_subheadHeight = dropheadHeight + _rowPadding;				}			}			_btnWidth = uidragnode.@width;			trace("_btnWidth = " + _btnWidth + "uidragnode.@width=" + uidragnode.@width);			_btnHeight = uidragnode.@height;			//Calulate the LAYOUT Given Content Area, and Btn Widths		//	var calcMargins:Number = startX + startX;			_iAreaWidth = _actWidth;// - 40;			_iAreaHeight = _actHeight;// - 80;						iarea.x = startX;			iarea.y = startY;			var _dragRowHeight:Number = _btnHeight + _rowPadding;			_dragContainer = new Sprite();			_dragContainer.x = 0;			_dragContainer.y = 0;			var dragHeadSpace:Number;			if (_hasDragHeader) {				_dragContainer.addChild(_dragHeaderArea);			}			/*	dragHeadSpace = _dragHeaderArea.height + _rowPadding;			} else {			dragHeadSpace = 0;			}			*/			_dragArea  = _buildDragBox(uidragnode);			_dragArea.x = 0			_dragArea.y = _subheadHeight;			_dragContainer.addChild(_dragArea);			_dropContainer = new Sprite();			_dragColumnWidth = _btnWidth + _columnPadding;			_dropColumnWidth = _iAreaWidth  - (_dragColumnWidth);			if (_actType =="dd2row") {				_dropContainer.x = startX; //uinode.@x;				_dropContainer.y =  _dragArea.y + _dragArea.height + 20;				_dropArea  = _buildDropBox2col(uidropnode2);			} else {				_dropContainer.x = _dragColumnWidth; //uinode.@x;				_dropContainer.y =  startY;// uinode.@y;				_dropArea  = _buildDropBox(uidropnode2);			}			var dropHeadSpace:Number;			if (_hasDropHeader) {				_dropContainer.addChild(_dropHeaderArea);			}			/*			dropHeadSpace =  _dropHeaderArea.height + _rowPadding;			} else {			dropHeadSpace = 0;			}			*/			_dropArea.x = 0			_dropArea.y = _subheadHeight;// + _rowPadding;			_dropContainer.addChild(_dropArea);			iarea.addChild(_dropContainer);			iarea.addChild(_dragContainer);			var iareaendy:Number;			var gpoint:Point;			var locpoint:Point;			if (_totalDragItems < _totalDropItems) {				_totalMatches = _totalDragItems;				gpoint = _dragContainer.localToGlobal(new Point(_dragContainer.x,_dragContainer.y));				iareaendy = gpoint.y + _dragContainer.height;			} else {				_totalMatches = _totalDropItems;				gpoint = _dropContainer.localToGlobal(new Point(_dropContainer.x,_dropContainer.y));				iareaendy = gpoint.y + _dropContainer.height;			}			//_actItemsArray.push(_iArea);			_feedbackContainer =  _createACTfeedback(uifeedback);						trace("iarwea width=" + iarea.width + "height=" + iarea.width +iarea.height);						return iarea;		}				private function _buildDragBox(uinode:XML):Sprite		{			var itemXML:XMLList = uinode.*;			var totalBtns:int = itemXML.length();			//_myColorOrder = ["salmon","turquoise","green","orange","blue","dkgrey","dkred"];			_myColorOrder.length  = totalBtns;			_totalDragItems = totalBtns;			for (var c:int = 0; c< _myColorOrder.length;c++) {				var clrName:String = _myColorOrder[c] as String;				var cobj:ColorSortObject = new ColorSortObject(c,clrName);				_colorNameArray.push(cobj);			}			var ibox:Sprite = new Sprite();			var tempBtnArray:Array = new Array();			tempBtnArray.length = totalBtns;			_dragBTNarray = new Array();			_dragBTNarray.length = totalBtns;			var fillColor:String = uinode.@fillColor;			var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);			var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"colorfill";			var clrarray:Array = new Array();			if (fillColorType == "gradient"){				clrarray.push(fillColorCode);				var fillcolor2:String = (uinode.hasOwnProperty("@fillColor2"))?uinode.@fillColor2:"grey";				var fillColorCode2:uint = SHELL_COLORS.lookUpColor(fillcolor2);				clrarray.push(fillColorCode2);			}			var dragUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dragUIp.uiFontSize = uinode.@fontSize;				dragUIp.uiFontColor = uinode.@fontColor;				dragUIp.uiFontHAlign = uinode.@fontAlign;				dragUIp.uiFontVAlign = uinode.@fontVAlign;				dragUIp.uiFontStyle= uinode.@fontStyle;				dragUIp.uiFrameSize= uinode.@frameSize;				dragUIp.uiFrameColor= uinode.@frameColor;				dragUIp.uiFillColorArray = clrarray;			} else {				dragUIp = null;			}			var xFactor:Number;			var yFactor:Number			if (uinode.@layout == '1row') {				xFactor = _btnWidth + _columnPadding;				yFactor = 0;			} else {				//_rowPadding = 				xFactor = 0;				yFactor = _btnHeight + _rowPadding;				//var randomPos:int = 0;			}			for each (var item:XML in itemXML) 			{ 				var bLabel:String = item;				//trace("_colorNameArray.length = " + _colorNameArray.length);				var randomPos:int = int(Math.random() * _colorNameArray.length);				var clrSortO:ColorSortObject = _colorNameArray.splice(randomPos,1)[0];				//var bColorString:String =clrSortO. "orange";//spliceArray[0]; //_colorNameArray.splice(randomPos,1)[0];				var bColorString:String = clrSortO.colorStringName;//SHELL_COLORS.lookUpColor(bColorString);				var bIndex:int = clrSortO.colorIndex;				var bColorType:String = "gradient";				var bColor:uint = SHELL_COLORS.lookUpColor(bColorString);				//var bIndex:int = spliceArray[1];				//trace("randomPos= " + randomPos + "bColorString= " + bColorString);				var dragbtn:ACTUI_DragBtnBox = new ACTUI_DragBtnBox();				dragbtn.init(bLabel,_btnWidth,_btnHeight,bColorType,bColor,dragUIp);				//var dragbtn:BTN_DragBox = new BTN_DragBox();				//	dragbtn.init(bLabel,_btnWidth,_btnHeight,bColor,dragUIp);				dragbtn.id = item.@id;				dragbtn.name = item.@id;				if (_actType =="dd2row") {					dragbtn.isAnswer = item.@isanswer;					dragbtn.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handlerType2);					dragbtn.addEventListener(MouseEvent.MOUSE_UP, _mouseUp_handlerType2);				} else {					dragbtn.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);					dragbtn.addEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				}				dragbtn.x = bIndex * xFactor;				dragbtn.y = bIndex * yFactor;				//this.mouseEnabled = true;				//this.mouseChildren = false;				//this.buttonMode = true;				ibox.addChild(dragbtn);				_dragBTNarray[bIndex] = dragbtn;			}			//ibox.addChild(_dragArea);			return ibox;		}		private function _buildDropBox2col(uinode:XML):Sprite		{			var ibox:Sprite = new Sprite();			var iHeight:Number = uinode.@height;			var dropColumnPadding:Number = uinode.@columnPadding;			var dropRowPadding:Number = uinode.@rowPadding;			var dropGridPadding:Number = uinode.@rowPadding;			//var totalBtns:int = itemXML.length();			//	_dropArea = new Sprite();			//_iArea.addChild(_dropArea);			var dropUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dropUIp.uiFontSize = uinode.@fontSize;				dropUIp.uiFontColor = uinode.@fontColor;				dropUIp.uiFontHAlign = uinode.@fontAlign;				dropUIp.uiFontVAlign = uinode.@fontVertAlign;				dropUIp.uiFontStyle= uinode.@fontStyle;			} else {				dropUIp = null;			}			if(uinode.hasOwnProperty("@frameSize")){				dropUIp.uiFrameSize = uinode.@frameSize;				dropUIp.uiFrameColor = uinode.@frameColor;			} else {				dropUIp.uiFrameSize = 1;				dropUIp.uiFrameColor = "white";			}			//	var fillColor:String = uinode.@fillColor;			//	var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);			var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"colorfill";			var clrarray:Array = new Array();			if (fillColorType == "gradient"){				var fillColor:String = uinode.@fillColor;				var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);				clrarray.push(fillColorCode);				var fillcolor2:String = (uinode.hasOwnProperty("@fillColor2"))?uinode.@fillColor2:"grey";				var fillColorCode2:uint = SHELL_COLORS.lookUpColor(fillcolor2);				clrarray.push(fillColorCode2);				dropUIp.uiFillColorArray = clrarray;			} else {				if(uinode.hasOwnProperty("@fillColor")){					dropUIp.uiFillColor = uinode.@fillColor;					dropUIp.uiFillAlpha = 1;				} else {					dropUIp.uiFillColor = "white";					dropUIp.uiFillAlpha = 0;				}			}			//	var yFactor:Number = _btnHeight + _rowPadding;			//	_dropArea.x = 0;			//	_dropArea.y = yFactor;			var zindex:Number = 0;			var bColor:uint = SHELL_COLORS.lookUpColor("ltblue");			var iColor:uint = SHELL_COLORS.lookUpColor("ltgrey");			var set01XML:XML = uinode.col[0];			var set01col1x:Number = set01XML.@x;			var set01row1y:Number = set01XML.@y;			var set01col2x:Number = set01col1x + _btnWidth +  dropGridPadding;			var set01row2y:Number = set01row1y + _btnHeight + dropGridPadding;			var _colWidth:Number = _btnWidth + _btnWidth + dropRowPadding;			var _colHeight:Number = _btnHeight + dropRowPadding;			var dropItem:ACTUI_BtnItem;			var set1index:int = 1;			for each (var item:XML in set01XML.*) 			{ 				var iContent:String = item;				var isAnswr:String = item.@isanswer;				//dropItem = new Act_DropBtn();				//dropItem.buildBtn(iContent,isAnswr,_btnWidth,_btnHeight);				//dropItem.name = item.@isanswer;				dropItem = new ACTUI_BtnItem();				dropItem.buildBtn('dropbtn',iContent,_btnWidth,_btnHeight,fillColorType,bColor,dropUIp);				//	dropItem.buildBtn(iContent,isAnswr,_btnWidth,_btnHeight);				dropItem.name = isAnswr;// item.@isanswer;				dropItem.isanswer =isAnswr;// item.@isanswer;				if (set1index == 1) {					dropItem.x = set01col1x;					dropItem.y = set01row1y;				} else if (set1index == 2) {					dropItem.x = set01col2x;					dropItem.y = set01row1y;				} else if (set1index == 3){					dropItem.x = set01col1x;					dropItem.y = set01row2y;				} else if (set1index == 4) {					dropItem.x = set01col2x;					dropItem.y = set01row2y;				} else {					trace('more than four per set');				}				set1index++;				zindex++;				ibox.addChild(dropItem);			}			var set02XML:XML = uinode.col[1];			var set02col1x:Number = set02XML.@x;			var set02row1y:Number = set02XML.@y;			var set02col2x:Number = set02col1x + _btnWidth +  dropGridPadding;			var set02row2y:Number = set02row1y + _btnHeight + dropGridPadding;			var set2index =1;			for each (var item2:XML in set02XML.*) 			{ 				var iContent2:String = item2;				var isAnswr2:String = item2.@isanswer;				dropItem = new ACTUI_BtnItem();				dropItem.buildBtn('dropbtn',iContent2,_btnWidth,_btnHeight,fillColorType,0xffffff,dropUIp);				dropItem.isanswer = isAnswr2;				//	dropItem = new Act_DropBtn();				//dropItem.buildBtn(iContent2,isAnswr2,_btnWidth,_btnHeight);				dropItem.name =isAnswr2;// item2.@isanswer;				if (set2index == 1) {					dropItem.x = set02col1x;					dropItem.y = set02row1y;				} else if (set2index == 2) {					dropItem.x = set02col2x;					dropItem.y = set02row1y;				} else if (set2index == 3){					dropItem.x = set02col1x;					dropItem.y = set02row2y;				} else if (set2index == 4) {					dropItem.x = set02col2x;					dropItem.y = set02row2y;				} else {					trace('more than four per set');				}				set2index++;				zindex++;				ibox.addChild(dropItem);			}			_totalDropItems = zindex;			return ibox;		}		private function _buildDropBox(uinode:XML):Sprite		{			var ibox:Sprite = new Sprite();			var iHeight:Number = uinode.@height;			var dropColumnPadding:Number = uinode.@columnPadding;			var droplayout:String = (uinode.hasOwnProperty("@layout"))?uinode.@layout:"default"; 									var dropUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dropUIp.uiFontSize = uinode.@fontSize;				dropUIp.uiFontColor = uinode.@fontColor;				dropUIp.uiFontHAlign = uinode.@fontAlign;				dropUIp.uiFontVAlign = uinode.@fontVertAlign;				dropUIp.uiFontStyle= uinode.@fontStyle;			} else {				dropUIp = null;			}						var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"colorfill";			var fillColor:String = (uinode.hasOwnProperty("@fillColor"))?uinode.@fillColor:"0xcccccc";			var fillAlpha:Number = (uinode.hasOwnProperty("@fillAlpha"))?uinode.@fillAlpha:1;						var clrarray:Array = new Array();			if (fillColorType == "gradient"){								var fillColorGrad1Code:uint = SHELL_COLORS.lookUpColor(fillColor);				clrarray.push(fillColorGrad1Code);				var fillColorGrad2Code:uint = SHELL_COLORS.lookUpColor(uinode.@fillColor2);				clrarray.push(fillColorGrad2Code);				dropUIp.uiFillColorArray = clrarray;			} else {				//if(uinode.hasOwnProperty("@fillColor")){					dropUIp.uiFillColor = fillColor;					dropUIp.uiFillAlpha = fillAlpha;						}			var frameSize:Number;			var frameColor:String;// = (uinode.hasOwnProperty("@frameColor"))?uinode.@frameColor:"0x666666";			var frameAlpha:Number;// = (uinode.hasOwnProperty("@frameAlpha"))?uinode.@frameAlpha:1;			if(uinode.hasOwnProperty("@frameSize")){				frameSize = uinode.@frameSize;				frameColor = (uinode.hasOwnProperty("@frameColor"))?uinode.@frameColor:"0x666666";				frameAlpha = (uinode.hasOwnProperty("@frameAlpha"))?uinode.@frameAlpha:1;						} else {				frameSize = 1;				frameColor = "white";			}			dropUIp.uiFrameSize = frameSize;			dropUIp.uiFrameColor =frameColor;			dropUIp.uiFrameAlpha = frameAlpha;						var fillColorLabel:String;			var fillAlphaLabel:Number;			var frameColorLabel:String;			var frameAlphaLabel:Number;						if(uinode.hasOwnProperty("@fillColorLabel")){				fillColorLabel = uinode.@fillColorLabel;				fillAlphaLabel = (uinode.hasOwnProperty("@fillAlphaLabel"))?uinode.@fillAlphaLabel:1;				frameColorLabel = (uinode.hasOwnProperty("@frameColorLabel"))?uinode.@frameColorLabel:frameColor;				frameAlphaLabel = (uinode.hasOwnProperty("@frameAlphaLabel"))?uinode.@frameAlphaLabel:1;			} else {				fillColorLabel = fillColor;				fillAlphaLabel = 0;				frameColorLabel = frameColor;				frameAlphaLabel = 0;			}			dropUIp.uiFillColorLabel = fillColorLabel;			dropUIp.uiFillAlphaLabel = fillAlphaLabel;			dropUIp.uiFrameColorLabel = frameColorLabel;			dropUIp.uiFrameAlphaLabel =frameAlphaLabel;						dropUIp.uiPadX = uinode.@columnPadding;						var itemXML:XMLList = uinode.*;			var yFactor:Number = _btnHeight + _rowPadding;			var zindex:Number = 0;			var dropItem:ACTUI_DropBoxArea;			for each (var item:XML in itemXML) 			{ 				var iContent:String = item;				dropItem = new ACTUI_DropBoxArea();												var itemid:String = item.@id;								dropItem.init(itemid,_btnWidth,_btnHeight,_dropColumnWidth,iHeight,iContent,droplayout,fillColorType,dropUIp);							dropItem.name = 'dropItem'+ itemid;// item.@id;				dropItem.id ='dropId'+ itemid;// item.@id;				dropItem.isAnswer = item.@id;				//dropItem.mouseChildren = false;				dropItem.x = 0;				dropItem.y = zindex *yFactor;												var dropFace:ACTUI_BtnFace = new ACTUI_BtnFace();				dropFace = new ACTUI_BtnFace();				var frameColorCode:uint = SHELL_COLORS.lookUpColor(frameColor);								dropFace.build(_btnWidth,_btnHeight,clrarray,frameSize,frameColorCode);				dropFace.name = itemid;												dropFace.x = dropItem.btnLocationX;				dropFace.y = dropItem.y;								trace('dropItemName = ' + dropItem.name);				ibox.addChild(dropItem);				dropItem.mouseEnabled = false;				dropItem.mouseChildren = false;				ibox.addChild(dropFace);				dropFace.mouseChildren = false;				dropFace.mouseEnabled = false;				/*				var dropSprite:Sprite = new Sprite();				dropSprite.graphics.lineStyle(dropUIp.uiFrameSize,dropUIp.uiFrameColorCode,1,true);;//,LineScaleMode.NORMAL, CapsStyle.ROUND,JointStyle.ROUND );				dropSprite.graphics.beginFill(0xffffff,1);				dropSprite.graphics.drawRect(0,0,_btnWidth,_btnHeight);				dropSprite.graphics.endFill();												//	dropItem.init(_btnWidth,_btnHeight,bColor,iWidth,iHeight,iContent,iColor);				//	dropSprite.id = item.@id;				dropSprite.name = item.@id;				dropSprite.mouseEnabled = true;				dropSprite.mouseChildren = false;				dropSprite.addChild(dropItem);								//dropItem.addChild(dropSprite);				dropSprite.x = 0;				dropSprite.y = zindex * yFactor;								*/				zindex++;				//ibox.addChild(dropSprite);			}			_totalDropItems = zindex;			return ibox;		}
						private function _createScreenText(ixml:XML):BodyUI		{			var bdyui:BodyUI = new BodyUI();			bdyui.layout = 'relative';			bdyui.name = "screentext";			var fontname:String = (ixml.hasOwnProperty("@fontName"))?ixml.@fontName:_fontFamily;//SHELL_VARS.SHELL_FONT_FAMILY;						var fontsize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;			var fontcolor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";			var fontstyle:String =(ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			var fontalign:String =(ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"left";						var uMargin:Number =  (ixml.hasOwnProperty("@margin"))?ixml.@margin:0;			var uxpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:10;			var uypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:10;						var startX:Number = (ixml.hasOwnProperty("@x"))?ixml.@x:0;			var startY:Number = (ixml.hasOwnProperty("@y"))?ixml.@y:0;			var uiAreaW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:_actWidth;			var uiAreaH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:0;			//var uW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:SHELL_VARS.CONTENT_WIDTH;			//var uH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:SHELL_VARS.CONTENT_HEIGHT;						var syncType:String = (ixml.hasOwnProperty("@syncType"))?ixml.@syncType:"buildy";						var uScreen:String = (ixml.hasOwnProperty("@screen"))?ixml.@screen:"1";			var holderX:Number = startX;			var holderY:Number = startY;			for each (var child:XML in ixml.*) {								var stxt:String = child;				var iX:String = (child.hasOwnProperty("@x"))?child.@x:"0";				var iY:String = (child.hasOwnProperty("@y"))?child.@y:"0";								var iW:Number = (child.hasOwnProperty("@width"))?child.@width:uiAreaW;				var iH:Number = (child.hasOwnProperty("@height"))?child.@height:uiAreaH;				//var sx:Number = (child.hasOwnProperty("@x"))?child.@x:startX;				//var sy:Number = (child.hasOwnProperty("@y"))?child.@y:startY;								//var itemW:Number = (child.hasOwnProperty("@width"))?child.@width:uiAreaW;				var fsize:Number = (child.hasOwnProperty("@fontSize"))?child.@fontSize:fontsize;				var fcolor:String = (child.hasOwnProperty("@fontColor"))?child.@fontColor:fontcolor;				var fstyle:String =(child.hasOwnProperty("@fontStyle"))?child.@fontStyle:fontstyle;				var falign:String =(child.hasOwnProperty("@fontAlign"))?child.@fontAlign:fontalign;								var screenText:ACTUI_ScreenText = new ACTUI_ScreenText();				screenText.addText(stxt,iW,fsize,fcolor,falign,fstyle,_fontFamily,_localeID);								//screenText.addText(stxt,iW,fsize,fontcolor,falign,fstyle,_fontFamily,_localeID);				var xpad:Number = (child.hasOwnProperty("@xPad"))?child.@xPad:uxpad;				var ypad:Number = (child.hasOwnProperty("@yPad"))?child.@yPad:uypad;				var newX:Number;				var newY:Number;								var newW:Number;// = screenText.width; 				var newH:Number;// = screenText.height; 				if (syncType == 'buildy'){					newW = iW;					newH = screenText.txtHeight;					newX = (!isNaN(Number(iX)))?Number(iX):SimpleUtils.relativeLayoutConverter(iX,uiAreaW,newW,uMargin);					newY = holderY + ypad;					holderY = newY + newH;// screenText.txtHeight;					uiAreaH = holderY;					trace("buildy = holderY =" + holderY + "  uiAreaH= "+ uiAreaH);				} else {					//	var ix:String = (child.hasOwnProperty("@x")) ? child.@x : "0";					//var iy:String = (child.hasOwnProperty("@y")) ? child.@y : groupY;					newW = iW;					newH = screenText.txtHeight;										//newX = (!isNaN(Number(ix)))?Number(groupX):SimpleUtils.relativeLayoutConverter(groupX,areaW,uPadding);;					//newY  = (!isNaN(Number(groupY)))?Number(groupY):SimpleUtils.relativeLayoutConverter(groupY,areaH,uPadding);					newX = (!isNaN(Number(iX)))?Number(iX):SimpleUtils.relativeLayoutConverter(iX,uiAreaW,newW,uMargin);					newY = (!isNaN(Number(iY)))?Number(iY):SimpleUtils.relativeLayoutConverter(iY,uiAreaH,newH,uMargin);					//	newX = (!isNaN(Number(ix)))?Number(ix):SimpleUtils.relativeLayoutConverter(ix,_actWidth,iW,uMargin);					//	newY = (!isNaN(Number(iy)))?Number(iy):SimpleUtils.relativeLayoutConverter(iy,_actHeight,iH,uMargin);					uiAreaH = newY + newH;					trace('nobuildy uiAreaH=' + uiAreaH);				}				trace('screentext newX='+ newX + ' newY= ' + newY + "holderY="+ holderY);								screenText.x = newX;				screenText.y = newY;				//this.addChild(txt);				screenText.mouseEnabled = false;				screenText.mouseChildren = false;				bdyui.addChild(screenText);															}			bdyui.graphics.beginFill(0xffffff,0);			bdyui.graphics.drawRect(0,0,uiAreaW,uiAreaH);			bdyui.graphics.endFill();			return bdyui;								}			/*		private function _createACTtext(ixml:XML):void	{		var spr:Sprite = new Sprite();		var w:Number;		var fSize:Number;				if (ixml.hasOwnProperty("@width")){			w = ixml.@width;		} else {			w = 600;		}		if (ixml.hasOwnProperty("@fontSize")){			fSize = ixml.@fontSize;		} else {			fSize = 18;		}		for each (var child:XML in ixml.*) {			var txt:ScreenCopy = new ScreenCopy();			var stxt:String = child;			var sx:Number = child.@x;			var sy:Number = child.@y;			if (child.hasOwnProperty("@width")){				w = child.@width;			} 			if (child.hasOwnProperty("@fontSize")){				fSize = child.@fontSize;			} 			txt.addText(stxt,w,fSize);			txt.x = sx;			txt.y = sy;			//this.addChild(txt);			txt.mouseEnabled = false;			txt.mouseChildren = false;			spr.addChild(txt);					}				_actItemsArray.push(spr);			}*/				/*		private function _createACTheaders(ixml:XML):void		{								for each (var child:XML in ixml.*) {				var txt:ScreenCopy = new ScreenCopy();				var stxt:String = child;				var sx:Number = child.@x;				var sy:Number = child.@y;								txt.addText(stxt,300,18);				txt.x = sx;				txt.y = sy;				this.addChild(txt);				txt.mouseEnabled = false;				txt.mouseChildren = false;			}					}	*/			private function _createACTfeedback(ixml:XML):Sprite		{			var fbsprite:Sprite = new Sprite();			var groupX:String = (ixml.hasOwnProperty("@x"))?ixml.@x:"0";			var groupY:String = (ixml.hasOwnProperty("@y"))?ixml.@y:"0";						var margin:Number = (ixml.hasOwnProperty("@margin"))?ixml.@margin:0;					var uw:Number =  (ixml.hasOwnProperty("@width"))?ixml.@width:_actWidth;						var uh:Number =  (ixml.hasOwnProperty("@height"))?ixml.@height:0;						var xpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:6;			var ypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:6;									var fontSize:Number =  (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;			var fontColor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"0x000000";			var fontColorCode:uint = SHELL_COLORS.lookUpColor(fontColor);			var fontAlign:String = (ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"center";			var fillColor:String = (ixml.hasOwnProperty("@fillColor"))?ixml.@fillColor:"paleblue";			var fillAlpha:Number = (ixml.hasOwnProperty("@fillAlpha"))?ixml.@fillAlpha:.9;			var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);									var frameSize:Number = (ixml.hasOwnProperty("@frameSize"))?ixml.@frameSize:2;			var frameAlpha:Number = (ixml.hasOwnProperty("@frameAlpha"))?ixml.@frameAlpha:1;			var frameColor:String = (ixml.hasOwnProperty("@frameColor"))?ixml.@frameColor:"0x000000";			var frameColorCode:uint = SHELL_COLORS.lookUpColor(frameColor);								//	var fbFrameSize:Number = 2;		//	var fbFrameColor:String = "black";//0x000000;					//	var fbFillAlpha:Number = .9;		//	var fbFillColor:String = "paleblue";					//	var fbFontSize:Number = 18;		//	var fbFontColor:String = "black";								//	var fbFillColorCode:uint = SHELL_COLORS.lookUpColor(fbFillColor);		//	var fbFrameColorCode:uint = 0x000000;		//	var fbFontColorCode:uint = 0x000000;						var fbRealHeight:Number = 10;						for each (var child:XML in ixml.*) {								_feedbackBox = new ACTUI_FeedBackBox();			_feedbackBox.init(child,uw,uh,frameSize,frameColorCode,fillColorCode,fillAlpha,fontSize,fontColorCode,xpad,ypad,fontAlign,_fontFamily,_localeID);				fbRealHeight = (_feedbackBox.boxHeight > fbRealHeight)?_feedbackBox.boxHeight:fbRealHeight;								fbsprite.addChild(_feedbackBox);			}												var iW:Number = uw;			var iH:Number = fbRealHeight;						var newX:Number = (!isNaN(Number(groupX)))?Number(groupX):SimpleUtils.relativeLayoutConverter(groupX,_actWidth,iW,margin);			var newY:Number = (!isNaN(Number(groupY)))?Number(groupY):SimpleUtils.relativeLayoutConverter(groupY,_actHeight,iH,margin);						fbsprite.x = newX;			fbsprite.y = newY;			return fbsprite;					}									private function _buildSubHeader(uinode:XML):Dictionary		{						var subHeadDic:Dictionary = new Dictionary(true);						var sub_uip:UIparams = new UIparams();						sub_uip.uiFontSize = uinode.@fontSize;			sub_uip.uiPadX = (uinode.hasOwnProperty("@xPad"))?uinode.@xPad:0;			sub_uip.uiPadY = (uinode.hasOwnProperty("@yPad"))?uinode.@yPad:0;			//var subHeaderFontSize:Number = uinode.@fontSize;			var subHeaderFontAlign:String;// = uinode.@fontAlign;						if(uinode.hasOwnProperty("@fontAlign")){				subHeaderFontAlign = uinode.@fontAlign;			} else {				subHeaderFontAlign = "left";			}			sub_uip.uiFontHAlign = subHeaderFontAlign;								//	var subHeaderFontColor:String = uinode.@mainColor;			sub_uip.uiFontColor = uinode.@fontColor;					//	var subHeaderFontColorCode:uint = SHELL_COLORS.lookUpColor(String(subHeaderFontColor));						var subHeaderFillColor:String;		//	var subHeaderFillColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFillColor));			var subHeaderFillAlpha:Number;// = uinode.@fillAlpha;//0;						if(uinode.hasOwnProperty("@fillAlpha")){				subHeaderFillAlpha = uinode.@fillAlpha;			} else {				subHeaderFillAlpha = 0;			}			if(uinode.hasOwnProperty("@fillColor")){				subHeaderFillColor = uinode.@fillColor;			} else {				subHeaderFillColor = "white"				subHeaderFillAlpha = 0;			}			sub_uip.uiFillColor = subHeaderFillColor;			sub_uip.uiFillAlpha = subHeaderFillAlpha;						var subHeaderFrameSize:Number;// = uinode.@fontSize;			var subHeaderFrameColor:String;// = uinode.@mainColor;			var subHeaderFrameColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			var subHeaderFrameAlpha:Number ;//= uinode.@frameAlpha;//0;						if(uinode.hasOwnProperty("@frameSize")){				subHeaderFrameSize = uinode.@frameSize;			} else {				subHeaderFrameSize = 4;			}						if(uinode.hasOwnProperty("@frameAlpha")){				subHeaderFrameAlpha = uinode.@frameAlpha;			}						if(uinode.hasOwnProperty("@frameColor")){				subHeaderFrameColor = uinode.@frameColor;				subHeaderFrameColorCode = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			} else {				subHeaderFrameColorCode = 0xffffff;				subHeaderFrameAlpha = 0;			}						var itemXML:XMLList = uinode.*;									var _dragHead:Sprite = new Sprite();			_dragHead.name = "dragger";			var _dropHead:Sprite = new Sprite();			_dropHead.name = "dropper";									for each (var item:XML in itemXML) 			{				var subheader_txt:String = item;				var subheader_width:Number = item.@width;				//internal attribures will override group attributes				if(item.hasOwnProperty("@fontAlign")){					sub_uip.uiFontHAlign = item.@fontAlign;				}				var subHeader:BodySubHeader = new BodySubHeader();								subHeader.addHeader(subheader_txt,sub_uip);													//	subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var subHeader:HeaderLabel = new HeaderLabel(subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var headerLabel:HeaderLabel = new HeaderLabel(header_txt,_header_width,headerSize,"left",headerColorCode,fillColorCode,fillColorAlpha,frameSize,frameColorCode);				subHeader.x = item.@x;				subHeader.y = item.@y;				var headerType:String  = item.@type;								trace("headerType=" + headerType);				if (headerType == "dropHeader"){					_dropHead.addChild(subHeader);				} else {					_dragHead.addChild(subHeader);									}				//	_dropContainer.addChild(subHeader);											}			//	subHeadDic["dropHead"] = _dropHead;			//	subHeadDic["dragHead"] = _dragHead;									subHeadDic[_dropHead] = "dropHead";						subHeadDic[_dragHead] = "dragHead";									return subHeadDic;					}						// Define a mouse down handler (user is dragging)		private function _mouseDown_handler(evt:MouseEvent):void {			var object = evt.target;			_dragArea.setChildIndex(object,_dragArea.numChildren -1);			//trace("_mouseDown_handler " + object.name);			_originX = object.x			_originY = object.y			object.useHandCursor = true;			object.startDrag();			object.alpha = 0.7;		}						private function _mouseUp_handler(evt:MouseEvent):void {						var obj = evt.target;			var target = evt.target.dropTarget;						obj.stopDrag();						/*	var obj:Sprite = evt.target as Sprite;			var target  = obj.dropTarget;*/						// obj.dropTarget will give us the reference to the shape of			// the object over which we dropped the circle.			//var target = obj.dropTarget;			// If the target object exists the we ask the test_match function			// to compare moved obj and target where it was dropped.			if (target != null)			{												_test_match(target, obj);			}					}				private function _test_match(target,obj):void		{			var matchMade:Boolean = false;						trace("targetname= " + target.name);						trace("objname= " + obj.name);			// test if the pairs match			//	if (_matchDict[target] == obj)			if (target.name == obj.name) {								matchMade = true;			} else if (target.parent.name == obj.name) {								matchMade = true;			} else if (target.parent.parent.name == obj.name){				matchMade = true;			} else {				matchMade = false;			}						if (matchMade){				//trace("a match");				// we got a hit				_matchHits = _matchHits+1;				trace("obj = " + obj.x + ' , ' + obj.y);				trace("target-> " + target.x + ', '+ target.y);				//	var globalPoint:Point = target.localToGlobal(new Point(parentX, parentY));				var globalPoint:Point = target.localToGlobal(new Point(target.x, target.y));				trace("globalPoints=" + globalPoint.x + " , " + globalPoint.y);				var newLocalPoint:Point = _dropArea.globalToLocal(globalPoint);				trace("newLocalPoint=" + newLocalPoint.x + " , " + newLocalPoint.y);								obj.x =  newLocalPoint.x;				obj.y =  newLocalPoint.y; 				/*				obj.x =  target.x;				obj.y =  target.y;				*/				_dropArea.addChild(obj);								// make the object transparent				obj.alpha = 1;				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				//	_playSoundEff("correct");				_playSoundEff("correct");				// Test if we are done				if (_matchHits == _totalMatches)				{										_displayFeedbackBox();								//_triggerActivtyComplete();				}			}			else			{				obj.x = _originX;				obj.y = _originY;				obj.alpha = 1;				_playSoundEff("wrong");				//_sndFX_neg = new SoundNeg();			//	_sndFX_channel = _sndFX_neg.play();							}		}									// Define a mouse down handler (user is dragging)		private function _mouseDown_handlerType2(evt:MouseEvent):void {						var object = evt.target;			_origX = object.x			_origY = object.y			object.useHandCursor = true;			object.startDrag();			object.alpha = 0.7;		}								private function _mouseUp_handlerType2(evt:MouseEvent):void {						var obj = evt.currentTarget;			//var target = evt.target.dropTarget;			var target = evt.currentTarget.dropTarget;			// If the target object exists the we ask the test_match function			// to compare moved obj and target where it was dropped.			if (target != null)			{				test_match_type2(target, obj);			}			obj.stopDrag();		}						private function test_match_type2(target,obj):void		{						var madeMatch:Boolean = false;						if (target.name == obj.isanswer) {								trace("a target match");				// we got a hit				obj.x = target.x;				obj.y = target.y;											madeMatch = true;			} else if (target.parent.name ==  obj.isanswer){				trace("a target parent match");				// we got a hit				trace("obj = " + obj.x + ' , ' + obj.y);				trace("target-> " + target.x + ', '+ target.y);				//	var globalPoint:Point = target.localToGlobal(new Point(parentX, parentY));				var globalPoint:Point = target.localToGlobal(new Point(target.x, target.y));				trace("globalPoints=" + globalPoint.x + " , " + globalPoint.y);				var newLocalPoint:Point = _dropArea.globalToLocal(globalPoint);				trace("newLocalPoint=" + newLocalPoint.x + " , " + newLocalPoint.y);								obj.x =  newLocalPoint.x;				obj.y =  newLocalPoint.y; 				/*				obj.x =  target.x;				obj.y =  target.y;				*/				_dropArea.addChild(obj);								// make the object transparent				obj.alpha = 1;				/*				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				//	_playSoundEff("correct");				_playSoundEff("correct");				obj.x = target.parent.x;				obj.y = target.parent.y;				*/				madeMatch = true;			} else {				madeMatch = false;							}						if (madeMatch) {				obj.alpha = 1;				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handlerType2);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handlerType2);				_playSoundEff("correct");				_matchHits = _matchHits+1;				// Test if we are done				if (_matchHits >= _totalMatches)				{					_displayFeedbackBox();									//_triggerActivtyComplete();									}			}  else {				obj.x = _origX;				obj.y = _origY;				obj.alpha = 1;				_playSoundEff("wrong");							}		}		private function _playSoundEff(sndType:String):void		{			var sndloader:MP3Loader = LoaderMax.getLoader(sndType);			trace("sndloader.status " + sndloader.status);			sndloader.gotoSoundTime(0,true);			/*			if (sndloader.playProgress >= 1) {				sndloader.gotoSoundTime(0,true);			} else {				sndloader.playSound();					}			*/		}		private function _displayFeedbackBox():void		{			this.addChild(_feedbackContainer);			_triggerActivtyComplete();								}		private function _triggerActivtyComplete():void		{			var ae:ShellEvent = new ShellEvent(ShellEvent.ACT_EVENT, 'actDone');			this.dispatchEvent(ae);					}	}}