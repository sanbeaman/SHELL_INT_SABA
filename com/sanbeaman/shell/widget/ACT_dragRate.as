package com.sanbeaman.shell.widget{		import com.greensock.loading.ImageLoader;	import com.sanbeaman.shell.data.ColorSortObject;	import com.sanbeaman.shell.data.UIparams;	import com.sanbeaman.shell.events.ShellEvent;	import com.sanbeaman.shell.utils.SimpleUtils;	import com.sanbeaman.shell.widget.ScreenCopy;	import com.sanbeaman.shell.widget.activity.ACTUI_BtnFace;	import com.sanbeaman.shell.widget.activity.ACTUI_DragBtnBox;	import com.sanbeaman.shell.widget.activity.ACTUI_DropBoxArea;	import com.sanbeaman.shell.widget.activity.ACTUI_FeedBackBox;	import com.sanbeaman.shell.widget.activity.ACTUI_RateSlider;	import com.sanbeaman.shell.widget.activity.ACTUI_ScreenSubHeader;	import com.sanbeaman.shell.widget.activity.ACTUI_ScreenText;		import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.text.TextFieldAutoSize;	import flash.utils.Dictionary;		import flashx.textLayout.formats.Direction;
		public class ACT_dragRate extends BodyUI	{		private var _actType:String;		private var _actXML:XMLList;				private var _actWidth:Number;		private var _actHeight:Number;						private var _dragMCarray:Array;		private var _dropMCarray:Array;				private var _origX:Number;		private var _origY:Number;						private var _itemYpadding:Number;		private var _itemXpadding:Number;				private var _actXstart:Number;		private var _actYstart:Number;				private var _matchHits:int;		private var _matchMax:int;						private var _columnPadding:Number;		private var _rowPadding:Number;				private var _btnWidth:Number;		private var _btnHeight:Number;					private var _shellDir:String;				private var _actItemsArray:Array;						private var _totalClicks:int = 0;			private var _totalMatches:int;				private var _iArea:BodyUI;		private var _iArea2:BodyUI;		private var _dragContainer:BodyUI;		private var _dragArea:BodyUI;						private var _dragHeader:BodyUI;		private var _dropHeader:BodyUI;				private var _dropContainer:BodyUI;		private var _feedbackContainer:BodyUI;				private var _dropArea:BodyUI;								private var _rateContainer:BodyUI;		private var _originX:Number;		private var _originY:Number;			//	private var _delayTimer:Timer;						private var _hasPrintBtn:Boolean = false;					private var _dragColumnWidth:Number;		private var _dropColumnWidth:Number;				private var _actX:Number;		private var _actY:Number;						private var _iAreaWidth:Number;		private var _iAreaHeight:Number;				private var _dragHeaderArea:BodyUI;		private var _dropHeaderArea:BodyUI;		private var _colorNameArray:Array;		private var _myColorOrder:Array;						private var _dragBTNarray:Array;				private var _dropBTNarray:Array;			//	private var _feedbackBoxArray:Array;		private var _hasFeedback:Boolean;						private var _totalDragItems:int;		private var _totalDropItems:int;						private var _subheadHeight:Number;						private var _useSFX:Boolean = false;				private var _reset_btn:BodyButton;		private var _submit_btn:BodyButton;		private var _print_btn:BodyButton;						private var _userSelectedItems:Array;				private var _actBACK:Sprite;		private var _screen1_ddrop:BodyUI;		private var _screen2_drate:BodyUI;		private var _screen1_items:Array;		private var _screen2_items:Array;						private var _screen2_iareaX:Number;		private var _screen2_iareaY:Number;				private var _rateSliderArray:Array;				private var _printView:Boolean;				private var _rateColumnX:Number;				private var _localeID:String;		private var _txtDirection:String;		private var _txtFieldASize:String;				private var _fontFamily:String;				public function ACT_dragRate()		{			super();		}		public function buildActivity(atype:String, actXML:XML, shellDir:String, actwidth:Number = 700, actheight:Number = 400, fontfamily:String = "Arial", langID:String = null):void		{			this.type = "act";			_actType = atype;			_shellDir = shellDir;			_actWidth = actwidth;			_actHeight = actheight;			_colorNameArray = new Array();			_myColorOrder = new Array();			_myColorOrder = ["salmon","turquoise","green","orange","blue","dkgrey","dkred","purple"];			//_actXML = actXML.*;		//	trace("_actXML " + _actXML.toString);			_matchHits = 0;			//_buildACTItems(actXML);						_fontFamily = fontfamily;						_localeID = (langID != null)?langID:"en";									_txtDirection = (_localeID == 'ar')?Direction.RTL:Direction.LTR;			_txtFieldASize = (_localeID == 'ar')?TextFieldAutoSize.RIGHT:TextFieldAutoSize.LEFT;			_buildACTContent(actXML);		}				private function _buildACTContent(scXML:XML):void		{			//_screen0_main = new Sprite();			var contentType:String = scXML.@type;			_actBACK = new Sprite();			_actX = scXML.@x;			_actY = scXML.@y;			this.addChild(_actBACK);			//var dragBtnsXML:XML;			//	var dropBtnsXML:XML;			//	var subheadXML:XML = null;									_userSelectedItems = new Array();			_screen1_items = new Array();			_screen2_items = new Array();						var screen1xml:XML = scXML.screen[0];			_screen1_ddrop = _buildScreen1(screen1xml);			_screen1_ddrop.x = screen1xml.@x;			_screen1_ddrop.y = screen1xml.@y;						_actBACK.addChild(_screen1_ddrop);						var screen2xml:XML = scXML.screen[1];			_screen2_drate = _buildScreen2(screen2xml);			_screen2_drate.x = screen2xml.@x;			_screen2_drate.y = screen2xml.@y;			_screen2_drate.visible = false;			_actBACK.addChild(_screen2_drate);									}				private function customSortAlgo(objA:Object, objB:Object):int {			if (objA.order < objB.order) {				return -1;			} else if (objA.order > objB.order) {				return 1;			} else {				return 0;			}		}		private function _buildScreen1(scrXML:XML):BodyUI			{											var dragXML:XML;			var dropXML:XML;			var subheadXML:XML;			var feedbackXML:XML;											var actXML:XMLList = scrXML.*;						for each (var ui:XML in actXML)			{				var ut:String = ui.@type;				var uiType:String = ut.toLowerCase();				trace("utype= " + uiType);				switch (uiType){					case 'screentext':						_screen1_items.push(_createScreenText(ui));						break;					case 'subheader':						subheadXML = ui;						//_buildSubHeader(ui);						break;					case 'itemdragbox':						dragXML = ui;					//	trace('dragXML = '+ dragXML.toString());						break;					case 'itemdropbox':						dropXML = ui;						break;					case 'actbtns':						_screen1_items.push(_createACTBtns(ui));						//_createACTBtns(ui);						break;					case 'feedbacktext':						//feedbackXML = ui;						//_createACTfeedback(ui);						break;									}							}			_screen1_items.push(_buildInteractiveArea(dragXML,dropXML,subheadXML));									var s1yHolder:Number = 0;			var s1xHolder:Number = 0;						var ypad:Number = 10;						var screenUI:BodyUI = new BodyUI();			_screen1_items.sort(SimpleUtils.customSortAlgo);			trace('render....'+ SimpleUtils.renderArr(_screen1_items));			_screen1_items.sort(customSortAlgo);						for (var i:int = 0; i < _screen1_items.length; i++) {				var s1:BodyUI = _screen1_items[i];							if (s1.layout != "abs"){					s1.x = s1xHolder;					s1.y = s1yHolder;					s1yHolder = int( s1.y + s1.height + ypad);				}				trace('_screen1_items--->' + s1.name + '_x-('+ s1.x+') _y-('+ s1.y +')');				screenUI.addChildAt(s1,0);			//	screenUI.addChild(s1);								//if(actitem.name == 'submitbtn'){				//	_feedbackY = yHolder;				//	}								}									return screenUI;		}				private function _buildScreen2(scrXML:XML):BodyUI		{						var screen2items:Array = new Array();			var actXML:XMLList = scrXML.*;						var screentxtArea:BodyUI;			var subheadArea:BodyUI;			var rateheaderArea:BodyUI;			var actbtnArea:BodyUI;						for each (var ui:XML in actXML)			{				var ut:String = ui.@type;				var uiType:String = ut.toLowerCase();				trace("utype= " + uiType);								var s2subhXML:XML;				var s2itemXML:XML;				//var bui:BodyUI;								switch (uiType){					case 'screentext':						screentxtArea = _createScreenText(ui);						break;					case 'newheader':						subheadArea = _createSubHeaders(ui);						//_buildSubHeader(ui);						break;					case 'rateheader':						rateheaderArea = _createSubHeaders(ui);					//	s2subhXML = ui;						//_buildSubHeader(ui);						break;					case 'itemrateslider':						_rateContainer = _createItemRateSlider(ui);												break;					case 'actbtns':						actbtnArea = _createACTBtns(ui);						break;					case 'feedbacktext':											//bui  =  _createACTfeedback(ui);						//_createACTfeedback(ui);						break;									}			//	screen2items.push(bui);							}		//	_rateContainer = _createItemRateSlider(s2itemXML);						var s2yHolder:Number = 0;			var s2xHolder:Number = 0;			var ypad:Number = 10;						var yholder:Number = 0;			var screenUI:BodyUI = new BodyUI();			screenUI.addChild(screentxtArea);			yholder += screentxtArea.height + ypad;			subheadArea.y = yholder;			rateheaderArea.y = yholder;			//yholder += subheadArea.height + ypad;			screenUI.addChild(subheadArea);			rateheaderArea.x = _rateColumnX;			screenUI.addChild(rateheaderArea);			yholder += subheadArea.height + ypad;			/*				for (var j:int = 0; j < screen2items.length; j++) {					var s2:BodyUI = screen2items[j];					if(s2.layout != "abs"){						s2.x = s2xHolder;						s2.y = s2yHolder;						s2yHolder =  s2.y + s2.height + ypad;					}					trace('s2=>'+ s2.name + ' yHolder----- ' + s2yHolder);					screenUI.addChild(s2);				}				*/			_iArea2 = new BodyUI();			_iArea2.x = s2xHolder;			_iArea2.y = yholder;			screenUI.addChild(_iArea2);			screenUI.addChild(actbtnArea);						return screenUI;		}				// updated		private function _createItemRateSlider(ixml:XML, shxml:XML = null):BodyUI		{			var ibox:BodyUI = new BodyUI();			ibox.name = 'iarea';			ibox.order = ixml.@uid;						var rateHeader:Sprite = new Sprite();			var rateArea:Sprite = new Sprite();			var yholder:Number = 0;						if (shxml != null) {				rateHeader = _createSubHeaders(shxml);				rateHeader.x = 0;				ibox.addChild(rateHeader);				yholder = rateHeader.height + 10;							}			var itemXML:XMLList = ixml.*;			var totalBtns:int = itemXML.length();							var xFactor:Number;			var yFactor:Number			xFactor = 0;			yFactor = _btnHeight + _rowPadding;			//var randomPos:int = 0;						_rateSliderArray = new Array();			var bIndex:int = 0;			for each (var item:XML in itemXML) 			{								var rslider:ACTUI_RateSlider = new ACTUI_RateSlider();				rslider.order =  item.@uid;				rslider.id = item.@id;				rslider.name = (item.hasOwnProperty("@isanswer"))?item.@isanswer:item.@id;				rslider.x = bIndex * xFactor;				rslider.y = bIndex * yFactor;				//this.mouseEnabled = true;				//this.mouseChildren = false;				//this.buttonMode = true;				_rateSliderArray.push(rslider);				rateArea.addChild(rslider);				bIndex++;			}						rateArea.y = yholder;			ibox.addChild(rateArea);															return ibox;								}				private function _createScreenText(ixml:XML):BodyUI		{			var spr:BodyUI = new BodyUI();			spr.layout = 'relative';			spr.name = "screentext";			var ordernum:int = ixml.@uid;			spr.order = ordernum;			var fontname:String = (ixml.hasOwnProperty("@fontName"))?ixml.@fontName:_fontFamily;						var fontsize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;			var fontcolor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";			var fontstyle:String =(ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			var fontalign:String =(ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"left";						var xpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:10;			var ypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:10;						var startX:Number = (ixml.hasOwnProperty("@x"))?ixml.@x:0;			var startY:Number = (ixml.hasOwnProperty("@y"))?ixml.@y:0;						var uW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:SHELL_VARS.CONTENT_WIDTH;			var uH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:SHELL_VARS.CONTENT_HEIGHT;						var uScreen:String = (ixml.hasOwnProperty("@screen"))?ixml.@screen:"1";						for each (var child:XML in ixml.*) {								var stxt:String = child;				var sx:Number = (child.hasOwnProperty("@x"))?child.@x:startX;				var sy:Number = (child.hasOwnProperty("@y"))?child.@y:startY;								var itemW:Number = (child.hasOwnProperty("@width"))?child.@width:uW;				var fsize:Number = (child.hasOwnProperty("@fontSize"))?child.@fontSize:fontsize;				var fcolor:String = (child.hasOwnProperty("@fontColor"))?child.@fontColor:fontcolor;				var fstyle:String =(child.hasOwnProperty("@fontStyle"))?child.@fontStyle:fontstyle;				var falign:String =(child.hasOwnProperty("@fontAlign"))?child.@fontAlign:fontalign;							var screenText:ACTUI_ScreenText = new ACTUI_ScreenText();				screenText.addText(stxt,itemW,fsize,fcolor,falign,fstyle,_fontFamily,_localeID);				//screenText.addText(stxt,itemW,fsize,fontname,fcolor,falign);								screenText.x = sx;				screenText.y = sy;				//this.addChild(txt);				screenText.mouseEnabled = false;				screenText.mouseChildren = false;				spr.addChild(screenText);								startY+= screenText.height + ypad;							}						return spr;								}			private function _createSubHeaders(ixml:XML):BodyUI		{						var subheadUI:BodyUI = new BodyUI();			subheadUI.name = 'subheadui';			subheadUI.order = ixml.@uid;			//var sub_uip:UIparams = new UIparams();			var uWidth:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:200;			var uHeight:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:40;			var uFontSize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:12;		   var uFontAlign:String = (ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"left";		   var uFontVAlign:String = (ixml.hasOwnProperty("@fontVertAlign"))?ixml.@fontVertAlign:"middle";		   var uFontStyle:String = (ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			//	var subHeaderFontColor:String = uinode.@mainColor;			var uFontColor:String  =(ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";						var uFillColor:String  =(ixml.hasOwnProperty("@fillColor"))?ixml.@fillColor:"white";			var uFillAlpha:Number =(ixml.hasOwnProperty("@fillAlpha"))?ixml.@fillAlpha:0;						var subHeaderFrameSize:Number = (ixml.hasOwnProperty("@frameSize"))?ixml.@frameSize:4;			var subHeaderFrameColor:String = (ixml.hasOwnProperty("@frameColor"))?ixml.@frameColor:"black";						var	subHeaderFrameColorCode:uint = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			var subHeaderFrameAlpha:Number = (ixml.hasOwnProperty("@frameAlpha"))?ixml.@frameAlpha:0;						var uxpad:Number = (ixml.hasOwnProperty("@xPad"))?ixml.@xPad:0;			var uypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:0;			var itemXML:XMLList = ixml.*;						for each (var item:XML in itemXML) 			{				var subheader_txt:String = item;								var itemH:Number = (item.hasOwnProperty("@height"))?item.@width:uHeight;				var itemW:Number = (item.hasOwnProperty("@width"))?item.@width:uWidth;;				var fsize:Number = (item.hasOwnProperty("@fontSize"))?item.@fontSize:uFontSize;				var fcolor:String = (item.hasOwnProperty("@fontColor"))?item.@fontColor:uFontColor;				//internal attribures will override group attributes				var fstyle:String =(item.hasOwnProperty("@fontStyle"))?item.@fontStyle:uFontStyle;			//	var falign:String =(item.hasOwnProperty("@fontAlign"))?item.@fontAlign:uFontAlign;				var xpad:Number = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				var ypad:Number = (item.hasOwnProperty("@yPad"))?item.@yPad:uypad;												var sub_uip:UIparams = new UIparams();				sub_uip.uiFontSize =(item.hasOwnProperty("@fontSize"))?item.@fontSize:uFontSize;				sub_uip.uiFontHAlign = (item.hasOwnProperty("@fontAlign"))?item.@fontAlign:uFontAlign;								//	var subHeaderFontColor:String = uinode.@mainColor;				sub_uip.uiFontColor =(item.hasOwnProperty("@fontColor"))?item.@fontColor:uFontColor;								sub_uip.uiFillColor =(item.hasOwnProperty("@fillColor"))?item.@fillColor:uFillColor;				sub_uip.uiFillAlpha =(item.hasOwnProperty("@fillAlpha"))?item.@fillAlpha:uFillAlpha;								sub_uip.uiWidth = (item.hasOwnProperty("@width"))?item.@width:uWidth;				sub_uip.uiHeight = (item.hasOwnProperty("@height"))?item.@height:uHeight;							trace('subhead=>'+ subheader_txt);			//	var subheader_width:Number = item.@width;				//internal attribures will override group attributes								sub_uip.uiFontVAlign = (item.hasOwnProperty("@fontVertAlign"))?item.@fontVertAlign:uFontVAlign;				sub_uip.uiPadX = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				sub_uip.uiPadY = (item.hasOwnProperty("@yPad"))?item.@yPad:uypad;				var itype0:String = item.@type;				var itype:String = itype0.toLowerCase();								if (itype == 'ratenumbers'){					var rnumScale:Sprite = new Sprite();										var rnumArray:Array = subheader_txt.split("|",10);					var rnumTotal:int = rnumArray.length;					var rnumSpace:Number =60;// int(sub_uip.uiWidth /rnumTotal);					var xstart:Number = 34;				//	var fsize:Number = sub_uip.uiFontSize;// item.@fontSize;				//	var fcolor:String =sub_uip.uiFontColor;// item.@fontColor;					var fwidth:Number = rnumSpace;					var fheight:Number = sub_uip.uiHeight;//item.@height;					var falign:String = sub_uip.uiFontHAlign;//item.@fontAlign;					var fvalign:String = sub_uip.uiFontVAlign;// item.@fontVAlign;					for (var rn:int = 0;rn <rnumArray.length; rn++){												var numStr:String = rnumArray[rn];						var numSprite:NumLabel = new NumLabel();						numSprite.init(numStr,fsize,fcolor,fwidth,fheight,falign,fvalign);						numSprite.x = xstart;						xstart += rnumSpace;						rnumScale.addChild(numSprite);							}					rnumScale.x = item.@x;					rnumScale.y = item.@y;					subheadUI.addChild(rnumScale);				} else {								var subHeader:BodySubHeader = new BodySubHeader();				subHeader.addHeader(subheader_txt,sub_uip,_fontFamily, _localeID);				subHeader.x = item.@x;				subHeader.y = item.@y;								subheadUI.addChild(subHeader);				}			}						return subheadUI;			}					private function _buildInteractiveArea(uidragnode:XML,uidropnode2:XML,uisubheadnode3:XML = null, uifeedback:XML = null):BodyUI		{						var iarea:BodyUI = new BodyUI();			iarea.name = 'iarea';						iarea.layout = 'relative';			var ordernum:int =  uidragnode.@uid;			iarea.order = ordernum;			_subheadHeight = 0;			var hasSubHead:Boolean = false;			var startX:Number =  uidragnode.@x;			var startY:Number =  uidragnode.@y;						_columnPadding =  uidragnode.@columnPadding;			_rowPadding = uidragnode.@rowPadding;						if (uisubheadnode3 != null) {				hasSubHead = true;				_dragHeaderArea = new BodyUI();				_dropHeaderArea = new BodyUI();				var subHeaderDic:Dictionary;				var _hasDragHeader:Boolean = false;				var _hasDropHeader:Boolean = false;								//subHeaderDic =  _buildSubHeader(uisubheadnode3);				subHeaderDic =  _build_SubHeader(uisubheadnode3);				var dropheadHeight:Number;				var dragheadHeight:Number;								for (var sp:* in subHeaderDic) {					var mybui:BodyUI;// = sp as Sprite;					if (subHeaderDic[sp] == "dropHead"){						_dropHeaderArea = sp as BodyUI;						if (_dropHeaderArea.numChildren > 0) {							_hasDropHeader = true;							dropheadHeight = _dropHeaderArea.height;						} else {							dropheadHeight = 0;						}						//trace("ds.name= " + ds.name + "ds.height= " + ds.height+  " numchildren= " + ds.numChildren);					} else if (subHeaderDic[sp] == "dragHead"){						_dragHeaderArea = sp as BodyUI;												if (_dragHeaderArea.numChildren > 0) {							_hasDragHeader = true;							dragheadHeight = _dragHeaderArea.height;						} else {							dragheadHeight= 0;						}											}				}				if (dragheadHeight >= dropheadHeight) {					_subheadHeight = dragheadHeight + _rowPadding;				} else {					_subheadHeight = dropheadHeight + _rowPadding;				}							}				_btnWidth = uidragnode.@width;			trace("_btnWidth = " + _btnWidth + "uidragnode.@width=" + uidragnode.@width);			_btnHeight = uidragnode.@height;						//Calulate the LAYOUT Given Content Area, and Btn Widths			var calcMargins:Number = startX + startX;			_iAreaWidth =_actWidth;// -40 ;// SHELL_VARS.GPS_CONTENT_WIDTH - 40;			_iAreaHeight = _actHeight;// - 80;// SHELL_VARS.GPS_CONTENT_HEIGHT - 80;			iarea.x = startX;			iarea.y = startY;			var _dragRowHeight:Number = _btnHeight + _rowPadding;			_dragContainer = new BodyUI();			_dragContainer.x = uidragnode.@x;			_dragContainer.y = uidragnode.@y;						var dragHeadSpace:Number;			if (_hasDragHeader) {				_dragContainer.addChild(_dragHeaderArea);			}			// ************ BUILD DRAG BOX ITEMS ************* //			_dragArea  = _buildDragBox(uidragnode);			_dragArea.x = 0			_dragArea.y = _subheadHeight;						_dragContainer.addChild(_dragArea);						_dropContainer = new BodyUI();									_dragColumnWidth = _btnWidth + _columnPadding;			_dropColumnWidth = _iAreaWidth - (_dragColumnWidth);			_rateColumnX = _dropColumnWidth + _columnPadding;			_dropContainer.x = _dragColumnWidth; //uinode.@x;			_dropContainer.y =  startY;// uinode.@y;					// ************ BUILD DROP BOX ITEMS ************* //			_dropArea  = _buildDropBox(uidropnode2);						var dropHeadSpace:Number;			if (_hasDropHeader) {				_dropContainer.addChild(_dropHeaderArea);			}			_dropArea.x = 0			_dropArea.y = _subheadHeight;// + _rowPadding;						_dropContainer.addChild(_dropArea);						iarea.addChild(_dropContainer);						iarea.addChild(_dragContainer);						var iareaendy:Number;			var gpoint:Point;			var locpoint:Point;						if (_totalDragItems < _totalDropItems) {				_totalMatches = _totalDragItems;				gpoint = _dragContainer.localToGlobal(new Point(_dragContainer.x,_dragContainer.y));								iareaendy = gpoint.y + _dragContainer.height;							} else {				_totalMatches = _totalDropItems;				gpoint = _dropContainer.localToGlobal(new Point(_dropContainer.x,_dropContainer.y));				iareaendy = gpoint.y + _dropContainer.height;			}								return iarea;		}		private function _build_SubHeader(uinode:XML):Dictionary		{			var subHeadDic:Dictionary = new Dictionary(true);						var uFontSize:Number = (uinode.hasOwnProperty("@fontSize"))?uinode.@fontSize:16;			var uFontColor:String = (uinode.hasOwnProperty("@fontColor"))?uinode.@fontColor:"0x000000";			var uFontAlign:String = (uinode.hasOwnProperty("@fontAlign"))?uinode.@fontAlign:"inherit";			var uFontStyle:String = (uinode.hasOwnProperty("@fontStyle"))?uinode.@fontStyle:"reg";						var uw:Number = (uinode.hasOwnProperty("@width"))?uinode.@width:100;			var uh:Number = (uinode.hasOwnProperty("@height"))?uinode.@height:0;						var uxpad:Number = (uinode.hasOwnProperty("@xPad"))?uinode.@xPad:0;			var uypad:Number = (uinode.hasOwnProperty("@yPad"))?uinode.@yPad:0;						var itemXML:XMLList = uinode.*;									var _dragHead:BodyUI = new BodyUI();			_dragHead.name = "dragger"			_dragHead.layout = 'relative';			var _dropHead:BodyUI = new BodyUI();			_dropHead.name = "dropper";			_dropHead.layout = 'relative';			/*			var _dragHead:Sprite = new Sprite();			_dragHead.name = "dragger";			var _dropHead:Sprite = new Sprite();			_dropHead.name = "dropper";			*/			for each (var item:XML in itemXML) 			{				var stxt:String = item;				var itemW:Number = (item.hasOwnProperty("@width"))?item.@width:uw;				var itemH:Number = (item.hasOwnProperty("@height"))?item.@height:uh;				var fsize:Number = (item.hasOwnProperty("@fontSize"))?item.@fontSize:uFontSize;				var fcolor:String = (item.hasOwnProperty("@fontColor"))?item.@fontColor:uFontColor;				//internal attribures will override group attributes				var fstyle:String =(item.hasOwnProperty("@fontStyle"))?item.@fontStyle:uFontStyle;				var falign:String =(item.hasOwnProperty("@fontAlign"))?item.@fontAlign:uFontAlign;				var xpad:Number = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				var ypad:Number = (item.hasOwnProperty("@yPad"))?item.@yPad:uypad;				var subHeader:ACTUI_ScreenSubHeader = new ACTUI_ScreenSubHeader();								subHeader.addText(stxt,itemW,itemH,fsize,fcolor,falign,fstyle,_fontFamily,_localeID);								var headerType:String  = item.@type;								trace("headerType=" + headerType);				if (headerType == "dropHeader"){					_dropHead.addChild(subHeader);				} else {					_dragHead.addChild(subHeader);				}			}			subHeadDic[_dropHead] = "dropHead";			subHeadDic[_dragHead] = "dragHead";			return subHeadDic;		}						private function _buildSubHeader(uinode:XML):Dictionary		{						var subHeadDic:Dictionary = new Dictionary(true);						var sub_uip:UIparams = new UIparams();						sub_uip.uiFontSize = uinode.@fontSize;						//var subHeaderFontSize:Number = uinode.@fontSize;			var subHeaderFontAlign:String;// = uinode.@fontAlign;						if(uinode.hasOwnProperty("@fontAlign")){				subHeaderFontAlign = uinode.@fontAlign;			} else {				subHeaderFontAlign = "left";			}			sub_uip.uiFontHAlign = subHeaderFontAlign;								//	var subHeaderFontColor:String = uinode.@mainColor;			sub_uip.uiFontColor = uinode.@fontColor;					//	var subHeaderFontColorCode:uint = SHELL_COLORS.lookUpColor(String(subHeaderFontColor));						var subHeaderFillColor:String;		//	var subHeaderFillColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFillColor));			var subHeaderFillAlpha:Number;// = uinode.@fillAlpha;//0;						if(uinode.hasOwnProperty("@fillAlpha")){				subHeaderFillAlpha = uinode.@fillAlpha;			} else {				subHeaderFillAlpha = 0;			}			if(uinode.hasOwnProperty("@fillColor")){				subHeaderFillColor = uinode.@fillColor;			} else {				subHeaderFillColor = "white"				subHeaderFillAlpha = 0;			}			sub_uip.uiFillColor = subHeaderFillColor;			sub_uip.uiFillAlpha = subHeaderFillAlpha;						var subHeaderFrameSize:Number;// = uinode.@fontSize;			var subHeaderFrameColor:String;// = uinode.@mainColor;			var subHeaderFrameColorCode:uint;// = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			var subHeaderFrameAlpha:Number ;//= uinode.@frameAlpha;//0;						if(uinode.hasOwnProperty("@frameSize")){				subHeaderFrameSize = uinode.@frameSize;			} else {				subHeaderFrameSize = 4;			}						if(uinode.hasOwnProperty("@frameAlpha")){				subHeaderFrameAlpha = uinode.@frameAlpha;			}						if(uinode.hasOwnProperty("@frameColor")){				subHeaderFrameColor = uinode.@frameColor;				subHeaderFrameColorCode = SHELL_COLORS.lookUpColor(String(subHeaderFrameColor));			} else {				subHeaderFrameColorCode = 0xffffff;				subHeaderFrameAlpha = 0;			}						var uxpad:Number = (uinode.hasOwnProperty("@xPad"))?uinode.@xPad:0;			var itemXML:XMLList = uinode.*;						var _dragHead:BodyUI = new BodyUI();			_dragHead.name = "dragger"			_dragHead.layout = 'relative';			var _dropHead:BodyUI = new BodyUI();			_dropHead.name = "dropper";			_dropHead.layout = 'relative';			/*			var _dragHead:Sprite = new Sprite();			_dragHead.name = "dragger";			var _dropHead:Sprite = new Sprite();			_dropHead.name = "dropper";			*/						for each (var item:XML in itemXML) 			{				var subheader_txt:String = item;				var subheader_width:Number = item.@width;				//internal attribures will override group attributes				if(item.hasOwnProperty("@fontAlign")){					sub_uip.uiFontHAlign = item.@fontAlign;				}								sub_uip.uiPadX = (item.hasOwnProperty("@xPad"))?item.@xPad:uxpad;				var subHeader:BodySubHeader = new BodySubHeader();								subHeader.addHeader(subheader_txt,sub_uip);													//	subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var subHeader:HeaderLabel = new HeaderLabel(subheader_txt,subheader_width,subHeaderFontSize,subHeaderFontAlign,subHeaderFontColorCode,subHeaderFillColorCode,subHeaderFillAlpha,subHeaderFrameSize,subHeaderFrameColorCode,subHeaderFrameAlpha);								//var headerLabel:HeaderLabel = new HeaderLabel(header_txt,_header_width,headerSize,"left",headerColorCode,fillColorCode,fillColorAlpha,frameSize,frameColorCode);				subHeader.x = item.@x;				subHeader.y = item.@y;				var headerType:String  = item.@type;								trace("headerType=" + headerType);				if (headerType == "dropHeader"){					_dropHead.addChild(subHeader);				} else {					_dragHead.addChild(subHeader);									}				//	_dropContainer.addChild(subHeader);											}			//	subHeadDic["dropHead"] = _dropHead;			//	subHeadDic["dragHead"] = _dragHead;									subHeadDic[_dropHead] = "dropHead";						subHeadDic[_dragHead] = "dragHead";									return subHeadDic;					}				private function _buildDragBox(uinode:XML):BodyUI		{			var itemXML:XMLList = uinode.*;			var totalBtns:int = itemXML.length();						//_myColorOrder = ["salmon","turquoise","green","orange","blue","dkgrey","dkred"];			_myColorOrder.length  = totalBtns;						_totalDragItems = totalBtns;						for (var c:int = 0; c< _myColorOrder.length;c++) {				var clrName:String = _myColorOrder[c] as String;				var cobj:ColorSortObject = new ColorSortObject(c,clrName);				_colorNameArray.push(cobj);			}												var ibox:BodyUI = new BodyUI();			var fillColor:String = (uinode.hasOwnProperty("@fillColor"))?uinode.@fillColor:"dkblue";			var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);			var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"gradient";			var clrarray:Array = new Array();			if (fillColorType == "gradient"){				clrarray.push(fillColorCode);				var fillcolor2:String = (uinode.hasOwnProperty("@fillColor2"))?uinode.@fillColor2:"grey";				var fillColorCode2:uint = SHELL_COLORS.lookUpColor(fillcolor2);				clrarray.push(fillColorCode2);							}						var tempBtnArray:Array = new Array();			tempBtnArray.length = totalBtns;			_dragBTNarray = new Array();			_dragBTNarray.length = totalBtns;											var dragUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dragUIp.uiFontSize = uinode.@fontSize;				dragUIp.uiFontColor = uinode.@fontColor;				dragUIp.uiFontHAlign = uinode.@fontAlign;				dragUIp.uiFontVAlign = uinode.@fontVAlign;				dragUIp.uiFontStyle= uinode.@fontStyle;				dragUIp.uiFrameSize= uinode.@frameSize;				dragUIp.uiFrameColor= uinode.@frameColor;				dragUIp.uiFillColorArray = clrarray;							} else {				dragUIp = null;			}									var xFactor:Number;			var yFactor:Number						if (uinode.@layout == '1row') {				xFactor = _btnWidth + _columnPadding;				yFactor = 0;			} else {				//_rowPadding = 				xFactor = 0;				yFactor = _btnHeight + _rowPadding;				//var randomPos:int = 0;			}			var bIndex:int = 0;// = clrSortO.colorIndex;			for each (var item:XML in itemXML) 			{ 				var bLabel:String = item;				var randomPos:int = int(Math.random() * _colorNameArray.length);								var clrSortO:ColorSortObject = _colorNameArray.splice(randomPos,1)[0];																var bColorString:String = clrSortO.colorStringName;//SHELL_COLORS.lookUpColor(bColorString);				//var bIndex:int = clrSortO.colorIndex;								var bColorCode:uint;				if (fillColorType == "gradient"){					bColorCode = SHELL_COLORS.lookUpColor(fillColor);				} else {					bColorCode = SHELL_COLORS.lookUpColor(bColorString);				}							var dragbtn:ACTUI_DragBtnBox = new ACTUI_DragBtnBox();								dragbtn.init(bLabel,_btnWidth,_btnHeight,fillColorType,bColorCode,dragUIp,_fontFamily,_localeID);				dragbtn.id = item.@id;				dragbtn.name = (item.hasOwnProperty("@isanswer"))?item.@isanswer:item.@id;				dragbtn.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				dragbtn.addEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				dragbtn.x = bIndex * xFactor;				dragbtn.y = bIndex * yFactor;				ibox.addChild(dragbtn);				_dragBTNarray.push(dragbtn);				bIndex++;				//_dragBTNarray[bIndex] = dragbtn;			}			//ibox.addChild(_dragArea);						return ibox;					}				/*		private function _buildDropBox2col(uinode:XML):BodyUI		{						var ibox:BodyUI = new BodyUI();									var iHeight:Number = uinode.@height;						var dropColumnPadding:Number = uinode.@columnPadding;			var dropRowPadding:Number = uinode.@rowPadding;			var dropGridPadding:Number = uinode.@rowPadding;			//var totalBtns:int = itemXML.length();			//	_dropArea = new Sprite();												//_iArea.addChild(_dropArea);			var dropUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dropUIp.uiFontSize = uinode.@fontSize;				dropUIp.uiFontColor = uinode.@fontColor;				dropUIp.uiFontHAlign = uinode.@fontAlign;				dropUIp.uiFontVAlign = uinode.@fontVertAlign;				dropUIp.uiFontStyle= uinode.@fontStyle;							} else {				dropUIp = null;			}			if(uinode.hasOwnProperty("@frameSize")){				dropUIp.uiFrameSize = uinode.@frameSize;				dropUIp.uiFrameColor = uinode.@frameColor;			} else {				dropUIp.uiFrameSize = 1;				dropUIp.uiFrameColor = "white";			}			if(uinode.hasOwnProperty("@fillColor")){				dropUIp.uiFillColor = uinode.@fillColor;				dropUIp.uiFillAlpha = 1;			} else {				dropUIp.uiFillColor = "white";				dropUIp.uiFillAlpha = 0;			}		//	var yFactor:Number = _btnHeight + _rowPadding;			//	_dropArea.x = 0;			//	_dropArea.y = yFactor;			var zindex:Number = 0;												var bColor:uint = SHELL_COLORS.lookUpColor("ltblue");			var iColor:uint = SHELL_COLORS.lookUpColor("ltgrey");						var set01XML:XML = uinode.col[0];						var set01col1x:Number = set01XML.@x;			var set01row1y:Number = set01XML.@y;						var set01col2x:Number = set01col1x + _btnWidth +  dropGridPadding;			var set01row2y:Number = set01row1y + _btnHeight + dropGridPadding;																	var dropItem:Act_DropBtn;						var _colWidth:Number = _btnWidth + _btnWidth + dropRowPadding;			var _colHeight:Number = _btnHeight + dropRowPadding;															var set1index:int = 1;			for each (var item:XML in set01XML.*) 			{ 				var iContent:String = item;				var isAnswr:String = item.@isanswer;				dropItem = new Act_DropBtn();				dropItem.buildBtn(iContent,isAnswr,_btnWidth,_btnHeight);				dropItem.name = item.@isanswer;								if (set1index == 1) {					dropItem.x = set01col1x;					dropItem.y = set01row1y;				} else if (set1index == 2) {					dropItem.x = set01col2x;					dropItem.y = set01row1y;				} else if (set1index == 3){					dropItem.x = set01col1x;					dropItem.y = set01row2y;				} else if (set1index == 4) {					dropItem.x = set01col2x;					dropItem.y = set01row2y;				} else {					trace('more than four per set');				}				set1index++;				zindex++;				ibox.addChild(dropItem);			}						var set02XML:XML = uinode.col[1];						var set02col1x:Number = set02XML.@x;			var set02row1y:Number = set02XML.@y;						var set02col2x:Number = set02col1x + _btnWidth +  dropGridPadding;			var set02row2y:Number = set02row1y + _btnHeight + dropGridPadding;						var set2index =1;						for each (var item2:XML in set02XML.*) 			{ 				var iContent2:String = item2;				var isAnswr2:String = item2.@isanswer;								dropItem = new Act_DropBtn();				dropItem.buildBtn(iContent2,isAnswr2,_btnWidth,_btnHeight);				dropItem.name = item2.@isanswer;							if (set2index == 1) {					dropItem.x = set02col1x;					dropItem.y = set02row1y;				} else if (set2index == 2) {					dropItem.x = set02col2x;					dropItem.y = set02row1y;				} else if (set2index == 3){					dropItem.x = set02col1x;					dropItem.y = set02row2y;				} else if (set2index == 4) {					dropItem.x = set02col2x;					dropItem.y = set02row2y;				} else {					trace('more than four per set');				}				set2index++;				zindex++;				ibox.addChild(dropItem);			}			_totalDropItems = zindex;						return ibox;		}		*/		private function _buildDropBox(uinode:XML):BodyUI		{			var ibox:BodyUI = new BodyUI();			//var ibox:Sprite = new Sprite();			var iHeight:Number = uinode.@height;			var dropColumnPadding:Number = uinode.@columnPadding;			var droplayout:String = (uinode.hasOwnProperty("@layout"))?uinode.@layout:"default"; 									var dropUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dropUIp.uiFontSize = uinode.@fontSize;				dropUIp.uiFontColor = uinode.@fontColor;				dropUIp.uiFontHAlign = uinode.@fontAlign;				dropUIp.uiFontVAlign = uinode.@fontVertAlign;				dropUIp.uiFontStyle= uinode.@fontStyle;			} else {				dropUIp = null;			}						var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"colorfill";			var fillColor:String = (uinode.hasOwnProperty("@fillColor"))?uinode.@fillColor:"0xcccccc";			var fillAlpha:Number = (uinode.hasOwnProperty("@fillAlpha"))?uinode.@fillAlpha:1;						var clrarray:Array = new Array();			if (fillColorType == "gradient"){								var fillColorGrad1Code:uint = SHELL_COLORS.lookUpColor(fillColor);				clrarray.push(fillColorGrad1Code);				var fillColorGrad2Code:uint = SHELL_COLORS.lookUpColor(uinode.@fillColor2);				clrarray.push(fillColorGrad2Code);				dropUIp.uiFillColorArray = clrarray;			} else {				//if(uinode.hasOwnProperty("@fillColor")){				dropUIp.uiFillColor = fillColor;				dropUIp.uiFillAlpha = fillAlpha;							}			var frameSize:Number;			var frameColor:String;// = (uinode.hasOwnProperty("@frameColor"))?uinode.@frameColor:"0x666666";			var frameAlpha:Number;// = (uinode.hasOwnProperty("@frameAlpha"))?uinode.@frameAlpha:1;			if(uinode.hasOwnProperty("@frameSize")){				frameSize = uinode.@frameSize;				frameColor = (uinode.hasOwnProperty("@frameColor"))?uinode.@frameColor:"0x666666";				frameAlpha = (uinode.hasOwnProperty("@frameAlpha"))?uinode.@frameAlpha:1;							} else {				frameSize = 1;				frameColor = "white";			}			dropUIp.uiFrameSize = frameSize;			dropUIp.uiFrameColor =frameColor;			dropUIp.uiFrameAlpha = frameAlpha;						var fillColorLabel:String;			var fillAlphaLabel:Number;			var frameColorLabel:String;			var frameAlphaLabel:Number;						if(uinode.hasOwnProperty("@fillColorLabel")){				fillColorLabel = uinode.@fillColorLabel;				fillAlphaLabel = (uinode.hasOwnProperty("@fillAlphaLabel"))?uinode.@fillAlphaLabel:1;				frameColorLabel = (uinode.hasOwnProperty("@frameColorLabel"))?uinode.@frameColorLabel:frameColor;				frameAlphaLabel = (uinode.hasOwnProperty("@frameAlphaLabel"))?uinode.@frameAlphaLabel:1;			} else {				fillColorLabel = fillColor;				fillAlphaLabel = 0;				frameColorLabel = frameColor;				frameAlphaLabel = 0;			}			dropUIp.uiFillColorLabel = fillColorLabel;			dropUIp.uiFillAlphaLabel = fillAlphaLabel;			dropUIp.uiFrameColorLabel = frameColorLabel;			dropUIp.uiFrameAlphaLabel =frameAlphaLabel;						dropUIp.uiPadX = uinode.@columnPadding;						var itemXML:XMLList = uinode.*;			var yFactor:Number = _btnHeight + _rowPadding;			var zindex:Number = 0;			var dropItem:ACTUI_DropBoxArea;			for each (var item:XML in itemXML) 			{ 				var iContent:String = item;				dropItem = new ACTUI_DropBoxArea();												var itemid:String = item.@id;								dropItem.init(itemid,_btnWidth,_btnHeight,_dropColumnWidth,iHeight,iContent,droplayout,fillColorType,dropUIp);				var dropid:String = item.@id;				var isanswer:String =  (item.hasOwnProperty("@isanswer"))?item.@isanswer:dropid;				dropItem.name = isanswer;// 'dropItem'+ itemid;// item.@id;				dropItem.id = isanswer;//'dropId'+ itemid;// item.@id;				dropItem.isAnswer = isanswer;//item.@id;				//dropItem.mouseChildren = false;				dropItem.x = 0;				dropItem.y = zindex *yFactor;												var dropFace:ACTUI_BtnFace = new ACTUI_BtnFace();				dropFace = new ACTUI_BtnFace();				var frameColorCode:uint = SHELL_COLORS.lookUpColor(frameColor);								dropFace.build(_btnWidth,_btnHeight,clrarray,frameSize,frameColorCode);				dropFace.name = isanswer;												dropFace.x = dropItem.btnLocationX;				dropFace.y = dropItem.y;								trace('dropItemName = ' + dropItem.name);				ibox.addChild(dropItem);				dropItem.mouseEnabled = false;				dropItem.mouseChildren = false;				ibox.addChild(dropFace);				dropFace.mouseChildren = false;				dropFace.mouseEnabled = false;							zindex++;				//ibox.addChild(dropSprite);			}			_totalDropItems = zindex;			return ibox;		}				/*		private function _buildDropBoxOLD(uinode:XML):BodyUI		{			var ibox:BodyUI = new BodyUI();			var iHeight:Number = uinode.@height;						var fillColor:String = (uinode.hasOwnProperty("@fillColor"))?uinode.@fillColor:"ltgrey";			var fillColorCode:uint = SHELL_COLORS.lookUpColor(fillColor);			var fillColorType:String = (uinode.hasOwnProperty("@fillType"))?uinode.@fillType:"gradient";			var clrarray:Array = new Array();			if (fillColorType == "gradient"){				clrarray.push(fillColorCode);				var fillcolor2:String = (uinode.hasOwnProperty("@fillColor2"))?uinode.@fillColor2:"grey";				var fillColorCode2:uint = SHELL_COLORS.lookUpColor(fillcolor2);				clrarray.push(fillColorCode2);			}			var dropColumnPadding:Number = uinode.@columnPadding;			var layout:String = (uinode.hasOwnProperty("@layout"))?uinode.@layout:"default";					var itemXML:XMLList = uinode.*;					var dropUIp:UIparams = new UIparams();			if(uinode.hasOwnProperty("@fontSize")){				dropUIp.uiFontSize = uinode.@fontSize;				dropUIp.uiFontColor = uinode.@fontColor;				dropUIp.uiFontHAlign = uinode.@fontAlign;				dropUIp.uiFontVAlign = uinode.@fontVertAlign;				dropUIp.uiFontStyle= uinode.@fontStyle;				dropUIp.uiFillColorArray = clrarray;			} else {				dropUIp = null;			}			if(uinode.hasOwnProperty("@frameSize")){				dropUIp.uiFrameSize = uinode.@frameSize;				dropUIp.uiFrameColor = uinode.@frameColor;			} else {				dropUIp.uiFrameSize = 1;				dropUIp.uiFrameColor = "white";			}			if(uinode.hasOwnProperty("@fillColor")){				dropUIp.uiFillColor = uinode.@fillColor;				dropUIp.uiFillAlpha = 1;			} else {				dropUIp.uiFillColor = "white";				dropUIp.uiFillAlpha = 0;			}			var yFactor:Number = _btnHeight + _rowPadding;			//	_dropArea.x = 0;			//	_dropArea.y = yFactor;			var zindex:Number = 0;					//	_dropColumnWidth = SHELL_VARS.GPS_CONTENT_WIDTH - (_btnWidth + dropColumnPadding);						for each (var item:XML in itemXML) 			{ 				var iContent:String = item;								var bColor:uint = fillColorCode;//SHELL_COLORS.lookUpColor("ltblue");				var iColor:uint = SHELL_COLORS.lookUpColor("ltgrey");												var dropItem:ACTUI_DropBoxArea = new ACTUI_DropBoxArea();								//if set to 'bitmap' will load png back drop, otherwize set fillcolor				//var fillColorType:String = "bitmap";				var dropname:String =  (item.hasOwnProperty("@isanswer"))?item.@isanswer:item.@id;//item.@id;								dropItem.init(dropname,_btnWidth,_btnHeight,bColor,_dropColumnWidth,iHeight,iContent,iColor,dropColumnPadding,layout,dropUIp,fillColorType);			//	dropItem.init(_btnWidth,_btnHeight,bColor,_dropColumnWidth,iHeight,iContent,iColor,dropColumnPadding,layout,dropUIp,fillColorType);				//dropItem.init(_btnWidth,_btnHeight,bColor,_dropColumnWidth,iHeight,iContent,iColor,dropColumnPadding,layout,dropUIp,fillColorType);				dropItem.name = dropname;				dropItem.id = item.@id;				dropItem.isAnswer = item.@id;								var dropSprite:Sprite = new Sprite();								dropSprite.name =dropname;			//	dropSprite.mouseEnabled = true;				dropSprite.mouseChildren = false;						dropSprite.graphics.lineStyle(dropUIp.uiFrameSize,dropUIp.uiFrameColorCode,1,true);;//,LineScaleMode.NORMAL, CapsStyle.ROUND,JointStyle.ROUND );				dropSprite.graphics.beginFill(bColor,0);				dropSprite.graphics.drawRect(0,0,_btnWidth,_btnHeight);				dropSprite.graphics.endFill();														dropSprite.x  = dropItem.btnLocationX;				dropItem.addChild(dropSprite);				dropItem.x = 0;				dropItem.y = zindex * yFactor;				zindex++;				ibox.addChild(dropItem);											}			_totalDropItems = zindex;						return ibox;														}*/				private function _createACTBtns(ixml:XML):BodyUI		{			var btnholder:BodyUI = new BodyUI();			btnholder.name = 'actbtns';			btnholder.order = ixml.@uid;						//	var uWidth:Number = (uinode.hasOwnProperty("@width"))?uinode.@width:200;			//	var uHeight:Number = (uinode.hasOwnProperty("@height"))?uinode.@height:34;			var groupX:String =  (ixml.hasOwnProperty("@x"))?ixml.@x:"0";			var groupY:String =(ixml.hasOwnProperty("@y"))?ixml.@y:"0";			var uX:Number = (ixml.hasOwnProperty("@x"))?ixml.@x:0;			var uY:Number =(ixml.hasOwnProperty("@y"))?ixml.@y:0;			var uW:Number = (ixml.hasOwnProperty("@width"))?ixml.@width:200;			var uH:Number = (ixml.hasOwnProperty("@height"))?ixml.@height:36;			//	var areaW:Number = _actWidth;			//	var areaH:Number = _actHeight;			var margin:Number = (ixml.hasOwnProperty("@margin"))?ixml.@margin:0;			//var holderX:Number = uX;			//var holderY:Number = uY;						var ypad:Number = (ixml.hasOwnProperty("@yPad"))?ixml.@yPad:0;									var fontname:String = (ixml.hasOwnProperty("@fontName"))?ixml.@fontName:SHELL_VARS.SHELL_FONT_FAMILY;						var fontsize:Number = (ixml.hasOwnProperty("@fontSize"))?ixml.@fontSize:18;			var fontcolor:String = (ixml.hasOwnProperty("@fontColor"))?ixml.@fontColor:"black";			var fontstyle:String =(ixml.hasOwnProperty("@fontStyle"))?ixml.@fontStyle:"reg";			var fontalign:String =(ixml.hasOwnProperty("@fontAlign"))?ixml.@fontAlign:"left";						var layout:String =(ixml.hasOwnProperty("@layout"))?ixml.@layout:"rel";						var uScreen:String = (ixml.hasOwnProperty("@screen"))?ixml.@screen:"1";									for each (var child:XML in ixml.*) {								var btntype0:String = child.@type;				var btntype:String =btntype0.toLowerCase();								var sx:Number = (child.hasOwnProperty("@x"))?child.@x:0;				var sy:Number = (child.hasOwnProperty("@y"))?child.@y:0;								var uip:UIparams = new UIparams();								var iw:Number = (child.hasOwnProperty("@width"))?child.@width:uW;							var ih:Number = (child.hasOwnProperty("@height"))?child.@height:uH;								uip.uiWidth =iw;								uip.uiHeight  = ih;				uip.uiFontSize = (child.hasOwnProperty("@fontSize"))?child.@fontSize:fontsize;				uip.uiFontColor = (child.hasOwnProperty("@fontColor"))?child.@fontColor:fontcolor;				uip.uiFontStyle =   (child.hasOwnProperty("@fontStyle"))?child.@fontStyle:fontstyle;																var btnlbl:String = child;				var pulsecolor:String = child.@pulseColor;								var bdyBTN:BodyButton = new BodyButton();				bdyBTN.init(btnlbl,uip,pulsecolor);								var spaceholder:Shape;				switch (btntype){					case 'reset':						_reset_btn = bdyBTN;						_reset_btn.x = sx;						_reset_btn.y = sy;						_reset_btn.isEnabled = false;						_reset_btn.alpha = .3;						spaceholder = _buildBoxSpacer(iw,ih);						spaceholder.x = sx;						spaceholder.y = sy;												btnholder.addChild(spaceholder)						btnholder.addChild(_reset_btn);						break;					case 'submit':						_submit_btn = bdyBTN;						_submit_btn.x = sx;						_submit_btn.y = sy;						_submit_btn.isEnabled = false;						_submit_btn.alpha = .3;						spaceholder = _buildBoxSpacer(iw,ih);						spaceholder.x = sx;						spaceholder.y = sy;						btnholder.addChild(spaceholder)						btnholder.addChild(_submit_btn);						break;					case 'print':						_print_btn = bdyBTN;						_print_btn.x = sx;						_print_btn.y = sy;												_print_btn.isEnabled = true;						_print_btn.visible = true;						_print_btn.alpha = 1;						spaceholder = _buildBoxSpacer(iw,ih);						spaceholder.x = sx;						spaceholder.y = sy;						btnholder.addChild(spaceholder)						btnholder.addChild(_print_btn);						break;				}							}			for (var i:int = 0; i < btnholder.numChildren; i++){				trace(i + '---->'+ btnholder.getChildAt(i).name);			}			var bthholderbounds:Rectangle = btnholder.getBounds(this);			trace('bthholderbounds'+ bthholderbounds.toString());// + '<===================== >hw'+hw);			var hh:Number = btnholder.height;			var hw:Number = btnholder.width;			trace('hh'+ hh + '<===================== >hw'+hw);			var ypadding:Number = margin + ypad;			var holderX:Number = (!isNaN(Number(groupX)))?Number(groupX):SimpleUtils.relativeLayoutConverter(groupX,_actWidth,hw,margin);;			var holderY:Number = (!isNaN(Number(groupY)))?Number(groupY):SimpleUtils.relativeLayoutConverter(groupY,_actHeight,hh,ypadding);			btnholder.layout = layout;			btnholder.x = holderX;			btnholder.y = holderY;// - ypad;;									return btnholder;			/*			if (uScreen == "2"){				//_screen2_				_screen2_items.push(spr);			} else {				_screen1_items.push(spr);			}			//_actItemsArray.push(spr);			*/		}				private function _buildBoxSpacer(w:Number,h:Number):Shape		{			var sh:Shape = new Shape();			sh.graphics.beginFill(0xcccccc,0);			sh.graphics.drawRect(0,0,w,h);			sh.graphics.endFill();						return sh;		}				private function _activate_btns():void		{					}		// Define a mouse down handler (user is dragging)		private function _mouseDown_handler(evt:MouseEvent):void {			var object = evt.target;			_dragArea.setChildIndex(object,_dragArea.numChildren -1);			trace("_mouseDown_handler " + object.name);						_originX = object.x			_originY = object.y			var btnobj:ACTUI_DragBtnBox = object as ACTUI_DragBtnBox;			btnobj.originX = _originX;			btnobj.originY = _originY;			object.useHandCursor = true;			object.startDrag();			object.alpha = 0.7;		}						private function _mouseUp_handler(evt:MouseEvent):void {						var obj = evt.target;			var target = evt.target.dropTarget;			/*	var obj:Sprite = evt.target as Sprite;			var target  = obj.dropTarget;*/						// obj.dropTarget will give us the reference to the shape of			// the object over which we dropped the circle.			//var target = obj.dropTarget;			// If the target object exists the we ask the test_match function			// to compare moved obj and target where it was dropped.			obj.stopDrag();			if (target != null)			{				_test_match(target, obj);			}					}		private function _test_match(target,obj):void		{			var matchMade:Boolean = false;						trace("targetname= " + target.name);						trace("objname= " + obj.name);			// test if the pairs match			//	if (_matchDict[target] == obj)			if (target.name == obj.name) {								matchMade = true;			} else if (target.parent.name == obj.name) {								matchMade = true;			} else if (target.parent.parent.name == obj.name){				matchMade = true;			} else {				matchMade = false;			}			if (matchMade){				//trace("a match");				// we got a hit				_matchHits = _matchHits+1;				trace("obj = " + obj.x + ' , ' + obj.y);				trace("target-> " + target.x + ', '+ target.y);				//	var globalPoint:Point = target.localToGlobal(new Point(parentX, parentY));				var globalPoint:Point = target.localToGlobal(new Point(target.x, target.y));				trace("globalPoints=" + globalPoint.x + " , " + globalPoint.y);				var newLocalPoint:Point = _dropArea.globalToLocal(globalPoint);				trace("newLocalPoint=" + newLocalPoint.x + " , " + newLocalPoint.y);								//obj.x =  newLocalPoint.x;				obj.x =  newLocalPoint.x;				obj.y =  newLocalPoint.y; 								_dropArea.addChild(obj);								// make the object transparent				obj.alpha = 1;				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				_userSelectedItems.push(obj as ACTUI_DragBtnBox);				//	_playSoundEff("correct");				//_playSoundEff("correct");				// Test if we are done				if (_matchHits == _totalMatches)				{					_activateSubmitBTN();										//_triggerActivtyComplete();				} else {					_activateResetBTN();				}			} else {				obj.x = _originX;				obj.y = _originY;				obj.alpha = 1;			//	_playSoundEff("wrong");				//_sndFX_neg = new SoundNeg();				//	_sndFX_channel = _sndFX_neg.play();							}		}								private function _test_matchOLD(target,obj):void		{						trace("testMatchname= " + target.name);			trace("objAnswername= " + obj.name);			// test if the pairs match			//	if (_matchDict[target] == obj)						if (target.name == obj.name) {								//trace("a match");				// we got a hit				_matchHits = _matchHits+1;				trace("obj = " + obj.x + ' , ' + obj.y);				trace("target-> " + target.x + ', '+ target.y);				//	var globalPoint:Point = target.localToGlobal(new Point(parentX, parentY));				var globalPoint:Point = target.localToGlobal(new Point(target.x, target.y));				trace("globalPoints=" + globalPoint.x + " , " + globalPoint.y);				var newLocalPoint:Point = _dropArea.globalToLocal(globalPoint);				trace("newLocalPoint=" + newLocalPoint.x + " , " + newLocalPoint.y);								//obj.x =  newLocalPoint.x;				obj.x = target.x;				obj.y =  newLocalPoint.y; 						_dropArea.addChild(obj);								// make the object transparent				obj.alpha = 1;				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				_userSelectedItems.push(obj as ACTUI_DragBtnBox);				//	_playSoundEff("correct");				//_playSoundEff("correct");				// Test if we are done				if (_matchHits == _totalMatches)				{					_activateSubmitBTN();										//_triggerActivtyComplete();				} else {					_activateResetBTN();				}			}			else			{				obj.x = _originX;				obj.y = _originY;				obj.alpha = 1;				//_playSoundEff("wrong");				//_sndFX_neg = new SoundNeg();			//	_sndFX_channel = _sndFX_neg.play();							}		}				private function _activateSubmitBTN():void		{			if (_submit_btn.isEnabled == false) {				_submit_btn.isEnabled = true;				_submit_btn.alpha = 1;				_submit_btn.addEventListener(MouseEvent.CLICK, _submitBtn_handler);				_submit_btn.buttonMode = true;				_submit_btn.useHandCursor = true;				_displayFeedbackBox();			}					}			private function _activateResetBTN():void		{			if (_reset_btn.isEnabled == false && _matchHits >0) {				_reset_btn.isEnabled = true;				_reset_btn.alpha = 1;				_reset_btn.buttonMode = true;				_reset_btn.useHandCursor = true;				_reset_btn.addEventListener(MouseEvent.CLICK, _resetBtn_handler);			}					}				private function _resetBtn_handler(me:MouseEvent):void		{			_reset_btn.isEnabled = false;			_reset_btn.alpha = .3;			_reset_btn.buttonMode = false;			_reset_btn.useHandCursor = false;			_reset_btn.removeEventListener(MouseEvent.CLICK, _resetBtn_handler);						if (_submit_btn.isEnabled) {				_submit_btn.isEnabled = false;				_submit_btn.alpha =.3;				_submit_btn.buttonMode = false;				_submit_btn.useHandCursor = false;				_submit_btn.removeEventListener(MouseEvent.CLICK, _submitBtn_handler);			}						while(_userSelectedItems.length > 0){				var btnobj:ACTUI_DragBtnBox = _userSelectedItems.pop();				// make the object transparent				btnobj.alpha = 1;				// kill its event listeners - object can't be moved anymore				btnobj.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				btnobj.addEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				btnobj.x = btnobj.originX;				btnobj.y = btnobj.originY;				_dragArea.addChild(btnobj);			}			_matchHits = 0;			/*			for (var i:int = 0; i <  _userSelectedItems.length; i++){				var btnobj:Act_DragBtnBox = _userSelectedItems[i] ;				// make the object transparent				btnobj.alpha = 1;				// kill its event listeners - object can't be moved anymore				btnobj.addEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handler);				btnobj.addEventListener(MouseEvent.MOUSE_UP, _mouseUp_handler);				btnobj.x = btnobj.originX;				btnobj.y = btnobj.originY;				_dragArea.addChild(btnobj);			}			*/					}		private function _submitBtn_handler(me:MouseEvent):void		{			_reset_btn.isEnabled = false;			_reset_btn.alpha = .3;			_reset_btn.removeEventListener(MouseEvent.CLICK, _resetBtn_handler);						if (_submit_btn.isEnabled) {				_submit_btn.isEnabled = false;				_submit_btn.alpha =.3;				_submit_btn.removeEventListener(MouseEvent.CLICK, _submitBtn_handler);				_switchSheets();			}								}				private function _printBtn_handler(evt:MouseEvent):void		{			var ae:ShellEvent = new ShellEvent(ShellEvent.ACT_EVENT, 'printActivity');			this.dispatchEvent(ae);			trace("_btnPrint_clickHandler");		}				private function _switchSheets():void		{			_dragContainer.visible = false;			_dropContainer.removeChild(_dropArea);						_dropArea.x = 0;//_screen2_iareaX;			_dropArea.y = 0;//_screen2_iareaY;			_dropArea.mouseChildren = false;			_dropArea.mouseEnabled =false;			_iArea2.addChild(_dropArea);			//_screen2_drate.removeChild(_rateContainer);						var rateX:Number = _dropArea.width + 20;						_rateContainer.x = _rateColumnX;;			_rateContainer.y = 0;			_iArea2.addChild(_rateContainer);			_screen1_ddrop.visible = false;			_screen2_drate.visible = true;			_print_btn.alpha = 1;			_print_btn.addEventListener(MouseEvent.CLICK,_printBtn_handler);			_print_btn.useHandCursor = true;			_print_btn.buttonMode = true;			_triggerActivtyComplete();					}		// Define a mouse down handler (user is dragging)		private function _mouseDown_handlerType2(evt:MouseEvent):void {						var object = evt.target;			_origX = object.x			_origY = object.y			object.useHandCursor = true;			object.startDrag();			object.alpha = 0.7;		}						/*		private function _mouseUp_handlerType2(evt:MouseEvent):void {						var obj = evt.currentTarget;			//var target = evt.target.dropTarget;			var target = evt.currentTarget.dropTarget;			// If the target object exists the we ask the test_match function			// to compare moved obj and target where it was dropped.			if (target != null)			{				test_match_type2(target, obj);			}			obj.stopDrag();		}		*/		/*		private function test_match_type2(target,obj):void		{						var madeMatch:Boolean = false;						if (target.name == obj.isanswer) {								trace("a target match");				// we got a hit				obj.x = target.x;				obj.y = target.y;											madeMatch = true;			} else if (target.parent.name ==  obj.isanswer){				trace("a target parent match");				// we got a hit				trace("obj = " + obj.x + ' , ' + obj.y);				trace("target-> " + target.x + ', '+ target.y);				//	var globalPoint:Point = target.localToGlobal(new Point(parentX, parentY));				var globalPoint:Point = target.localToGlobal(new Point(target.x, target.y));				trace("globalPoints=" + globalPoint.x + " , " + globalPoint.y);				var newLocalPoint:Point = _dropArea.globalToLocal(globalPoint);				trace("newLocalPoint=" + newLocalPoint.x + " , " + newLocalPoint.y);								obj.x =  newLocalPoint.x;				obj.y =  newLocalPoint.y; 								_dropArea.addChild(obj);								// make the object transparent				obj.alpha = 1;								madeMatch = true;			} else {				madeMatch = false;							}						if (madeMatch) {				obj.alpha = 1;				// kill its event listeners - object can't be moved anymore				obj.removeEventListener(MouseEvent.MOUSE_DOWN, _mouseDown_handlerType2);				obj.removeEventListener(MouseEvent.MOUSE_UP, _mouseUp_handlerType2);				_playSoundEff("correct");				_matchHits = _matchHits+1;				// Test if we are done				if (_matchHits >= _totalMatches)				{					_displayFeedbackBox();									//_triggerActivtyComplete();									}			}  else {				obj.x = _origX;				obj.y = _origY;				obj.alpha = 1;				_playSoundEff("wrong");							}		}		*/		/*		private function _playSoundEff(sndType:String):void		{			if (sndType == "correct" && _useSFX == true) {								var correct:Sound = new AnswerCorrect()				correct.play();			} else if (sndType == "wrong" && _useSFX ==true) {				var wrong:Sound =  new AnswerWrong();				wrong.play();							}					}				*/				private function _displayFeedbackBox():void		{			if (_hasFeedback){				this.addChild(_feedbackContainer);				_triggerActivtyComplete();			}		}				private function _triggerActivtyComplete():void		{			var ae:ShellEvent = new ShellEvent(ShellEvent.ACT_EVENT, 'actDone');			this.dispatchEvent(ae);					}		public function get printView():Boolean
		{
			return _printView;
		}		public function set printView(value:Boolean):void
		{
			_printView = value;			if (_printView){				_print_btn.visible = false;				_setUIprintView(true);			} else {				_print_btn.visible = true;				_setUIprintView(false);			}
		}				private function _setUIprintView(printOn:Boolean):void		{			for (var i:int = 0 ; i < _rateSliderArray.length; i++){				var rs:ACTUI_RateSlider = _rateSliderArray[i] as ACTUI_RateSlider;				rs.switchPrintView(printOn);			}		}	}}