package com.sanbeaman.shell.utils{	import flash.text.*;	import flash.text.Font;		import fl.text.TLFTextField;		import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;			import flashx.textLayout.elements.*;	import flashx.textLayout.formats.*;		import flashx.textLayout.formats.TextLayoutFormat;	import flashx.textLayout.formats.VerticalAlign;	import flashx.textLayout.tlf_internal;	import flashx.textLayout.*;	public class TextFormatter	{				/*		[Embed(source='/fonts/CAFont_CourseTitle.swf', symbol="CAFont_CourseTitle")]		public var cafont_coursetitle:Class;				*/		private var _tlf_array:Array;				private var _tlf_default:TextLayoutFormat;		private var _tlf_courseHeader:TextLayoutFormat;		private var _tlf_sectionHeader:TextLayoutFormat;		private var _tlf_sceneHeader:TextLayoutFormat;						private var _tf_array:Array;		private var _tf_default:TextFormat;		private var _tf_sectionHeader:TextFormat;		private var _tf_sceneHeader:TextFormat;		/*private var _tlf_bodyHeader:TextLayoutFormat;		private var _tlf_bodyCopy:TextLayoutFormat;		private var _tlf_bodyBullet:TextLayoutFormat;		private var _tlf_bodyNote:TextLayoutFormat;		private var _tlf_gpsNote:TextLayoutFormat;		private var _tlf_gpsBtnLabel:TextLayoutFormat;		private var _tlf_toolTips:TextLayoutFormat;*/								private var _haveFontsLoaded:Boolean = false;				public function TextFormatter()		{			//this.register_fonts();			//	_tf_sectionHeader.styleName = "sectionHeader";		var loader:Loader = new Loader();		loader.contentLoaderInfo.addEventListener(Event.COMPLETE, _onFontsLoaded);		loader.load(new URLRequest("shellfonts/FontPack_EN.swf"));		/* 		* Embed a font with bold typeface by location. 		*/		}						public function get haveFontsLoaded():Boolean
		{
			return _haveFontsLoaded;
		}		private function _onFontsLoaded(event:Event):void		{		// Check embedded fonts...	//	trace(Font.enumerateFonts(false));		var font_Array:Array = Font.enumerateFonts(false).sortOn('fontName');				_haveFontsLoaded = true;		/*		for (var i:int = 0; i < font_Array.length; i++) {			font_Array.push(new String(font_Array[i].fontName));						trace("FontName " + font_Array[i]);			}		*/		}					private function _setTLayoutFormats():void		{		trace("TextForamtet");				_tf_sectionHeader = new TextFormat();		_tf_sectionHeader.color = 0xFFFFFF;		_tf_sectionHeader.size =  24;		_tf_sectionHeader.indent = 10;		_tf_sectionHeader.font = "Arial";								}				public function createTextFormats():Boolean{						_tlf_array = new Array();						_tlf_default = new TextLayoutFormat();			_tlf_default.color = 0x000000;			_tlf_default.backgroundColor = 0xcccccc;			_tlf_default.backgroundAlpha = 1;			_tlf_default.fontFamily = "Arial";			_tlf_default.fontSize = 12;			_tlf_default.styleName = "default";									_tlf_array.push(_tlf_default);					_tlf_sectionHeader = new TextLayoutFormat();			_tlf_sectionHeader.color =  SHELL_COLORS.CLR_WHITE;//0xFFFFFF;			_tlf_sectionHeader.verticalAlign = VerticalAlign.TOP;			_tlf_sectionHeader.paddingLeft = 10;						_tlf_sectionHeader.backgroundColor = SHELL_COLORS.CLR_BLUE;// 0x15A5C9;			_tlf_sectionHeader.backgroundAlpha = 1;			_tlf_sectionHeader.fontFamily = "Arial";			_tlf_sectionHeader.fontSize = 24;			_tlf_sectionHeader.styleName = "sectionHeader";						_tlf_array.push(_tlf_sectionHeader);						_tlf_sceneHeader = new TextLayoutFormat();						_tlf_sceneHeader.color =SHELL_COLORS.CLR_BLUE;//0x15A5C9; 			_tlf_sceneHeader.backgroundColor =SHELL_COLORS.CLR_WHITE;// 0xFFFFFF;			_tlf_sceneHeader.backgroundAlpha = 1;			_tlf_sceneHeader.fontFamily = "Arial";			_tlf_sceneHeader.fontSize = 20;			_tlf_sceneHeader.styleName = "sceneHeader";			_tlf_array.push(_tlf_sceneHeader);			trace("how many formatters= " + _tlf_array.length);						var isdone:Boolean;			if (_tlf_array.length > 0) {				isdone = true;			} else {				isdone = false;			}						return isdone;				}				public function lookupTextFormatLayout(styleName:String):TextLayoutFormat		{									var tlf0:TextLayoutFormat;			for (var i:int =0; i < _tlf_array.length; i++) {				var tlf1:TextLayoutFormat = _tlf_array[i] as TextLayoutFormat;				if (tlf1.styleName == styleName) {					trace("styleName = " + tlf1.styleName);					tlf0 = tlf1;// as TextLayoutFormat;										break;				}				tlf0 = _tlf_default as TextLayoutFormat;			}						return tlf0;								}		public function lookupTextFormat(styleName:String):TextFormat		{			var tf:TextFormat;						switch (styleName) {				case 'sectionHeader':					tf = _tf_sectionHeader as TextFormat;					break;								}			return tf;		}			}}